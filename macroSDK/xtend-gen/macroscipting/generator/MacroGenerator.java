/**
 * generated by Xtext
 */
package macroscipting.generator;

import com.google.common.collect.Iterables;
import com.google.inject.Inject;
import macroscipting.macro.Bloc;
import macroscipting.macro.Directive;
import macroscipting.macro.Domain;
import macroscipting.macro.conditionnalDirective;
import macroscipting.macro.ifDirective;
import macroscipting.macro.intDirective;
import macroscipting.macro.onLoadBloc;
import macroscipting.macro.strDirective;
import macroscipting.macro.varDirective;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.resource.IResourceDescriptions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
@SuppressWarnings("all")
public class MacroGenerator implements IGenerator {
  public static boolean compactMicro = false;
  
  @Inject
  private IGenerator generator;
  
  @Inject
  private IResourceDescriptions resourceDescriptions;
  
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    System.out.println("hellotheshit");
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<Domain> _filter = Iterables.<Domain>filter(_iterable, Domain.class);
    for (final Domain e : _filter) {
      {
        System.out.println("filtered to Domain");
        if ((e instanceof Domain)) {
          final Domain domain = ((Domain) e);
          onLoadBloc onLoad = ((onLoadBloc) null);
          EList<EObject> _eContents = domain.eContents();
          for (final EObject e3 : _eContents) {
            if ((e3 instanceof onLoadBloc)) {
              onLoad = ((onLoadBloc) e3);
              String _compactMicro = onLoad.getCompactMicro();
              String _lowerCase = _compactMicro.toLowerCase();
              boolean _equals = _lowerCase.equals("true");
              MacroGenerator.compactMicro = _equals;
            }
          }
          String _plus = ("e = (" + e);
          String _plus_1 = (_plus + ").");
          System.out.println(_plus_1);
          String _filePath = onLoad.getFilePath();
          String _fileName = onLoad.getFileName();
          String _plus_2 = (_filePath + _fileName);
          String _plus_3 = (_plus_2 + ".micro");
          String _compile = this.compile(domain);
          fsa.generateFile(_plus_3, _compile);
        } else {
          System.out.println("ERROR 1");
        }
      }
    }
  }
  
  public String compile(final Domain domain) {
    StringBuilder _stringBuilder = new StringBuilder();
    StringBuilder b = _stringBuilder;
    EList<EObject> _eContents = domain.eContents();
    for (final EObject e3 : _eContents) {
      if ((e3 instanceof onLoadBloc)) {
        onLoadBloc onload = ((onLoadBloc) e3);
        StringBuilder _append = b.append("onLoadBloc:\n\t");
        StringBuilder _append_1 = _append.append("filePath=");
        String _filePath = onload.getFilePath();
        StringBuilder _append_2 = _append_1.append(_filePath);
        StringBuilder _append_3 = _append_2.append(";\n");
        StringBuilder _append_4 = _append_3.append("fileName=");
        String _fileName = onload.getFileName();
        StringBuilder _append_5 = _append_4.append(_fileName);
        StringBuilder _append_6 = _append_5.append(";\n");
        StringBuilder _append_7 = _append_6.append("characterID=");
        int _characterID = onload.getCharacterID();
        StringBuilder _append_8 = _append_7.append(_characterID);
        StringBuilder _append_9 = _append_8.append(";\n");
        StringBuilder _append_10 = _append_9.append("scope=");
        String _scope = onload.getScope();
        StringBuilder _append_11 = _append_10.append(_scope);
        StringBuilder _append_12 = _append_11.append(";\n");
        StringBuilder _append_13 = _append_12.append("compactMicro=");
        String _compactMicro = onload.getCompactMicro();
        StringBuilder _append_14 = _append_13.append(_compactMicro);
        StringBuilder _append_15 = _append_14.append(";\n");
        _append_15.append(";\n");
      } else {
        if ((e3 instanceof Bloc)) {
          Bloc bloc = ((Bloc) e3);
          StringBuilder _compileBloc = this.compileBloc(bloc);
          b.append(_compileBloc);
        } else {
        }
      }
    }
    return b.toString();
  }
  
  public StringBuilder compileBloc(final Bloc bloc) {
    StringBuilder _stringBuilder = new StringBuilder();
    StringBuilder b = _stringBuilder;
    StringBuilder _append = b.append("\n\n#");
    int _name = bloc.getName();
    StringBuilder _append_1 = _append.append(_name);
    _append_1.append(":\t");
    EList<EObject> _eContents = bloc.eContents();
    for (final EObject eDir : _eContents) {
      if ((eDir instanceof Directive)) {
        Directive dir = ((Directive) eDir);
        StringBuilder _compileDirective = this.compileDirective(dir);
        b.append(_compileDirective);
      } else {
      }
    }
    b.append("\n;");
    return b;
  }
  
  public StringBuilder compileDirective(final Directive dir) {
    StringBuilder _stringBuilder = new StringBuilder();
    StringBuilder b = _stringBuilder;
    StringBuilder _append = b.append("\n$");
    String _name = dir.getName();
    _append.append(_name);
    if ((dir instanceof conditionnalDirective)) {
      conditionnalDirective condDir = ((conditionnalDirective) dir);
      StringBuilder _compileConditionnalDirective = this.compileConditionnalDirective(condDir);
      b.append(_compileConditionnalDirective);
      return b;
    }
    b.append(":");
    if ((dir instanceof varDirective)) {
      varDirective varDir = ((varDirective) dir);
      String _left = varDir.getLeft();
      StringBuilder _append_1 = b.append(_left);
      StringBuilder _append_2 = _append_1.append("=");
      String _right = varDir.getRight();
      _append_2.append(_right);
    } else {
      if ((dir instanceof intDirective)) {
        intDirective intDir = ((intDirective) dir);
        int _value = intDir.getValue();
        b.append(_value);
      } else {
        if ((dir instanceof strDirective)) {
          strDirective strDir = ((strDirective) dir);
          String _value_1 = strDir.getValue();
          b.append(_value_1);
        }
      }
    }
    b.append(";");
    return b;
  }
  
  public StringBuilder compileConditionnalDirective(final conditionnalDirective dir) {
    StringBuilder _xblockexpression = null;
    {
      StringBuilder _stringBuilder = new StringBuilder();
      StringBuilder b = _stringBuilder;
      b.append("(");
      if ((dir instanceof ifDirective)) {
        ifDirective ifDir = ((ifDirective) dir);
        String _left = ifDir.getLeft();
        b.append(_left);
        String _operator = ifDir.getOperator();
        b.append(_operator);
        String _right = ifDir.getRight();
        b.append(_right);
      }
      b.append(")");
      b.append(":");
      if ((dir instanceof ifDirective)) {
        ifDirective ifDir_1 = ((ifDirective) dir);
        EList<Directive> _directives = ifDir_1.getDirectives();
        for (final Directive d : _directives) {
          Object _compileDirective = this.compileDirective(d);
          b.append(_compileDirective);
        }
      }
      StringBuilder _append = b.append("\n;");
      _xblockexpression = (_append);
    }
    return _xblockexpression;
  }
}
