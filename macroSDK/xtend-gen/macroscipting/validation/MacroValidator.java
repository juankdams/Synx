/**
 * generated by Xtext
 */
package macroscipting.validation;

import com.google.common.base.Objects;
import macroscipting.macro.Bloc;
import macroscipting.macro.Domain;
import macroscipting.macro.MacroPackage.Literals;
import macroscipting.macro.intDirective;
import macroscipting.macro.onLoadBloc;
import macroscipting.validation.AbstractMacroValidator;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.validation.Check;

/**
 * Custom validation rules.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
@SuppressWarnings("all")
public class MacroValidator extends AbstractMacroValidator {
  public final static String INVALID_NAME = "invalidName";
  
  public final static String INVALID_ELEMENT = "invalidElement";
  
  public final static String INVALID_ARGUMENT = "invalidArgument";
  
  @Check
  public void checkBlocIDUnique(final Bloc bloc) {
    EObject _eContainer = bloc.eContainer();
    EList<EObject> _eContents = _eContainer.eContents();
    for (final EObject o : _eContents) {
      if ((o instanceof Bloc)) {
        final Bloc b = ((Bloc) o);
        boolean _notEquals = (!Objects.equal(b, bloc));
        if (_notEquals) {
          int _name = b.getName();
          int _name_1 = bloc.getName();
          boolean _equals = (_name == _name_1);
          if (_equals) {
            this.error("Bloc ID already exists.", 
              Literals.BLOC__NAME, 
              MacroValidator.INVALID_NAME);
          }
        }
      } else {
        boolean _equals_1 = ((o instanceof onLoadBloc) == false);
        if (_equals_1) {
          this.error("An element of the Macro isn\'t a Bloc nor an OnLoadBloc. All elements of Macros should be Blocs.", 
            Literals.DOMAIN__ELEMENTS, 
            MacroValidator.INVALID_ELEMENT);
        }
      }
    }
  }
  
  @Check
  public void checkGOTOvalidID(final Domain domain, final intDirective dir) {
    String _name = dir.getName();
    boolean _notEquals = (!Objects.equal(_name, "GOTO"));
    if (_notEquals) {
      return;
    }
    EList<EObject> _eContents = domain.eContents();
    for (final EObject o : _eContents) {
      if ((o instanceof Bloc)) {
        final Bloc b = ((Bloc) o);
        int _name_1 = b.getName();
        int _value = dir.getValue();
        boolean _equals = (_name_1 == _value);
        if (_equals) {
          return;
        }
      } else {
        this.error("An element of the Macro isn\'t a Bloc. All elements of Macros should be Blocs.", 
          Literals.DOMAIN__ELEMENTS, 
          MacroValidator.INVALID_ELEMENT);
      }
    }
    this.error("GOTO directive points towards an inexisting Bloc ID.", 
      Literals.INT_DIRECTIVE__VALUE, 
      MacroValidator.INVALID_ARGUMENT);
  }
}
