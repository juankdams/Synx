package Enums;

import Core.Exceptions;

/** @author : Crystal */
public enum ItemType {

	
	
	
	
	//Types
	ITEM_TYPE_AMULETTE(1),
	ITEM_TYPE_ARC(2),
	ITEM_TYPE_BAGUETTE(3),
	ITEM_TYPE_BATON(4),
	ITEM_TYPE_DAGUES(5),
	ITEM_TYPE_EPEE(6),
	ITEM_TYPE_MARTEAU(7),
	ITEM_TYPE_PELLE(8),
	ITEM_TYPE_ANNEAU(9),
	ITEM_TYPE_CEINTURE(10),
	ITEM_TYPE_BOTTES(11),
	ITEM_TYPE_POTION(12),
	ITEM_TYPE_PARCHO_EXP(13),
	ITEM_TYPE_DONS(14),
	ITEM_TYPE_RESSOURCE(15),
	ITEM_TYPE_COIFFE(16),
	ITEM_TYPE_CAPE(17),
	ITEM_TYPE_FAMILIER(18),
	ITEM_TYPE_HACHE(19),
	ITEM_TYPE_OUTIL(20),
	ITEM_TYPE_PIOCHE(21),
	ITEM_TYPE_FAUX(22),
	ITEM_TYPE_DOFUS(23),
	ITEM_TYPE_QUETES(24),
	ITEM_TYPE_DOCUMENT(25),
	ITEM_TYPE_FM_POTION(26),
	ITEM_TYPE_TRANSFORM(27),
	ITEM_TYPE_BOOST_FOOD(28),
	ITEM_TYPE_BENEDICTION(29),
	ITEM_TYPE_MALEDICTION(30),
	ITEM_TYPE_RP_BUFF(31),
	ITEM_TYPE_PERSO_SUIVEUR(32),
	ITEM_TYPE_PAIN(33),
	ITEM_TYPE_CEREALE(34),
	ITEM_TYPE_FLEUR(35),
	ITEM_TYPE_PLANTE(36),
	ITEM_TYPE_BIERE(37),
	ITEM_TYPE_BOIS(38),
	ITEM_TYPE_MINERAIS(39),
	ITEM_TYPE_ALLIAGE(40),
	ITEM_TYPE_POISSON(41),
	ITEM_TYPE_BONBON(42),//Useable + Targetable
	ITEM_TYPE_POTION_OUBLIE(43),
	ITEM_TYPE_POTION_METIER(44),
	ITEM_TYPE_POTION_SORT(45),
	ITEM_TYPE_FRUIT(46),
	ITEM_TYPE_OS(47),
	ITEM_TYPE_POUDRE(48),
	ITEM_TYPE_COMESTI_POISSON(49),
	ITEM_TYPE_PIERRE_PRECIEUSE(50),
	ITEM_TYPE_PIERRE_BRUTE(51),
	ITEM_TYPE_FARINE(52),
	ITEM_TYPE_PLUME(53),
	ITEM_TYPE_POIL(54),
	ITEM_TYPE_ETOFFE(55),
	ITEM_TYPE_CUIR(56),
	ITEM_TYPE_LAINE(57),
	ITEM_TYPE_GRAINE(58),
	ITEM_TYPE_PEAU(59),
	ITEM_TYPE_HUILE(60),
	ITEM_TYPE_PELUCHE(61),
	ITEM_TYPE_POISSON_VIDE(62),
	ITEM_TYPE_VIANDE(63),
	ITEM_TYPE_VIANDE_CONSERVEE(64),
	ITEM_TYPE_QUEUE(65),
	ITEM_TYPE_METARIA(66),
	ITEM_TYPE_LEGUME(68),
	ITEM_TYPE_VIANDE_COMESTIBLE(69),
	ITEM_TYPE_TEINTURE(70),
	ITEM_TYPE_EQUIP_ALCHIMIE(71),
	ITEM_TYPE_OEUF_FAMILIER(72),
	ITEM_TYPE_MAITRISE(73),
	ITEM_TYPE_FEE_ARTIFICE(74),
	ITEM_TYPE_PARCHEMIN_SORT(75),
	ITEM_TYPE_PARCHEMIN_CARAC(76),
	ITEM_TYPE_CERTIFICAT_CHANIL(77),
	ITEM_TYPE_RUNE_FORGEMAGIE(78),
	ITEM_TYPE_BOISSON(79),
	ITEM_TYPE_OBJET_MISSION(80),
	ITEM_TYPE_SAC_A_DOS(81),
	ITEM_TYPE_BOUCLIER(82),
	ITEM_TYPE_PIERRE_AME(83),
	ITEM_TYPE_CLEFS(84),
	ITEM_TYPE_PIERRE_AME_PLEINE(85),
	ITEM_TYPE_POPO_OUBLI_PERCEP(86),
	ITEM_TYPE_PARCHO_RECHERCHE(87),
	ITEM_TYPE_RUNES_MAGIQUE(88),//Style Fragments magiques et runes de signature.
	ITEM_TYPE_CADEAUX(89),
	ITEM_TYPE_FANTOME_FAMILIER(90),
	ITEM_TYPE_DRAGODINDE(91),
	ITEM_TYPE_BOUFTOU(92),
	ITEM_TYPE_OBJET_ELEVAGE(93),
	ITEM_TYPE_OBJET_UTILISABLE(94),
	ITEM_TYPE_PLANCHE(95),
	ITEM_TYPE_ECORCE(96),
	ITEM_TYPE_CERTIF_MONTURE(97),
	ITEM_TYPE_RACINE(98),
	ITEM_TYPE_FILET_CAPTURE(99),
	ITEM_TYPE_SAC_RESSOURCE(100),
	ITEM_TYPE_ARBALETE(102),
	ITEM_TYPE_PATTE(103),
	ITEM_TYPE_AILE(104),
	ITEM_TYPE_OEUF(105),
	ITEM_TYPE_OREILLE(106),
	ITEM_TYPE_CARAPACE(107),
	ITEM_TYPE_BOURGEON(108),
	ITEM_TYPE_OEIL(109),
	ITEM_TYPE_GELEE(110),
	ITEM_TYPE_COQUILLE(111),
	ITEM_TYPE_PRISME(112),
	ITEM_TYPE_OBJET_VIVANT(113),
	ITEM_TYPE_ARME_MAGIQUE(114),
	ITEM_TYPE_FRAGM_AME_SHUSHU(115),
	ITEM_TYPE_POTION_FAMILIER(116);
	
	
	
	private byte value;
	private ItemType(int value) {
		this.value = (byte)value;
	}
	public byte getValue() {
		return value;
	}
	
	public static ItemType getItemType(byte type){
		for(ItemType ce : ItemType.values()){
			if(ce.value == type){
				return ce;
			}
		}
		Exceptions.throwNullPointerException("ItemType.getItemType(byte) : ItemType non trouvée : ItemType demandé: ("+type+") invalide.");
		return null;
	}
	
	
	
	
}
