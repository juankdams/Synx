/*
* generated by Xtext
*/
grammar InternalMacro;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package macroscipting.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package macroscipting.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import macroscipting.services.MacroGrammarAccess;

}

@parser::members {
 
 	private MacroGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(MacroGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleDomain
entryRuleDomain 
:
{ before(grammarAccess.getDomainRule()); }
	 ruleDomain
{ after(grammarAccess.getDomainRule()); } 
	 EOF 
;

// Rule Domain
ruleDomain
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDomainAccess().getGroup()); }
(rule__Domain__Group__0)
{ after(grammarAccess.getDomainAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleClass
entryRuleClass 
:
{ before(grammarAccess.getClassRule()); }
	 ruleClass
{ after(grammarAccess.getClassRule()); } 
	 EOF 
;

// Rule Class
ruleClass
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getClassAccess().getGroup()); }
(rule__Class__Group__0)
{ after(grammarAccess.getClassAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleonLoadBloc
entryRuleonLoadBloc 
:
{ before(grammarAccess.getOnLoadBlocRule()); }
	 ruleonLoadBloc
{ after(grammarAccess.getOnLoadBlocRule()); } 
	 EOF 
;

// Rule onLoadBloc
ruleonLoadBloc
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOnLoadBlocAccess().getGroup()); }
(rule__OnLoadBloc__Group__0)
{ after(grammarAccess.getOnLoadBlocAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBloc
entryRuleBloc 
:
{ before(grammarAccess.getBlocRule()); }
	 ruleBloc
{ after(grammarAccess.getBlocRule()); } 
	 EOF 
;

// Rule Bloc
ruleBloc
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBlocAccess().getGroup()); }
(rule__Bloc__Group__0)
{ after(grammarAccess.getBlocAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDirective
entryRuleDirective 
:
{ before(grammarAccess.getDirectiveRule()); }
	 ruleDirective
{ after(grammarAccess.getDirectiveRule()); } 
	 EOF 
;

// Rule Directive
ruleDirective
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDirectiveAccess().getGroup()); }
(rule__Directive__Group__0)
{ after(grammarAccess.getDirectiveAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleconditionnalDirective
entryRuleconditionnalDirective 
:
{ before(grammarAccess.getConditionnalDirectiveRule()); }
	 ruleconditionnalDirective
{ after(grammarAccess.getConditionnalDirectiveRule()); } 
	 EOF 
;

// Rule conditionnalDirective
ruleconditionnalDirective
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConditionnalDirectiveAccess().getAlternatives()); }
(rule__ConditionnalDirective__Alternatives)
{ after(grammarAccess.getConditionnalDirectiveAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulestrDirective
entryRulestrDirective 
:
{ before(grammarAccess.getStrDirectiveRule()); }
	 rulestrDirective
{ after(grammarAccess.getStrDirectiveRule()); } 
	 EOF 
;

// Rule strDirective
rulestrDirective
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStrDirectiveAccess().getGroup()); }
(rule__StrDirective__Group__0)
{ after(grammarAccess.getStrDirectiveAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleintDirective
entryRuleintDirective 
:
{ before(grammarAccess.getIntDirectiveRule()); }
	 ruleintDirective
{ after(grammarAccess.getIntDirectiveRule()); } 
	 EOF 
;

// Rule intDirective
ruleintDirective
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIntDirectiveAccess().getGroup()); }
(rule__IntDirective__Group__0)
{ after(grammarAccess.getIntDirectiveAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulevarDirective
entryRulevarDirective 
:
{ before(grammarAccess.getVarDirectiveRule()); }
	 rulevarDirective
{ after(grammarAccess.getVarDirectiveRule()); } 
	 EOF 
;

// Rule varDirective
rulevarDirective
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVarDirectiveAccess().getGroup()); }
(rule__VarDirective__Group__0)
{ after(grammarAccess.getVarDirectiveAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleifDirective
entryRuleifDirective 
:
{ before(grammarAccess.getIfDirectiveRule()); }
	 ruleifDirective
{ after(grammarAccess.getIfDirectiveRule()); } 
	 EOF 
;

// Rule ifDirective
ruleifDirective
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIfDirectiveAccess().getGroup()); }
(rule__IfDirective__Group__0)
{ after(grammarAccess.getIfDirectiveAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulewaitDirective
entryRulewaitDirective 
:
{ before(grammarAccess.getWaitDirectiveRule()); }
	 rulewaitDirective
{ after(grammarAccess.getWaitDirectiveRule()); } 
	 EOF 
;

// Rule waitDirective
rulewaitDirective
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getWaitDirectiveAccess().getGroup()); }
(rule__WaitDirective__Group__0)
{ after(grammarAccess.getWaitDirectiveAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulelockDirective
entryRulelockDirective 
:
{ before(grammarAccess.getLockDirectiveRule()); }
	 rulelockDirective
{ after(grammarAccess.getLockDirectiveRule()); } 
	 EOF 
;

// Rule lockDirective
rulelockDirective
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLockDirectiveAccess().getGroup()); }
(rule__LockDirective__Group__0)
{ after(grammarAccess.getLockDirectiveAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleoperator
entryRuleoperator 
:
{ before(grammarAccess.getOperatorRule()); }
	 ruleoperator
{ after(grammarAccess.getOperatorRule()); } 
	 EOF 
;

// Rule operator
ruleoperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOperatorAccess().getAlternatives()); }
(rule__Operator__Alternatives)
{ after(grammarAccess.getOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIntegerDirective
entryRuleIntegerDirective 
:
{ before(grammarAccess.getIntegerDirectiveRule()); }
	 ruleIntegerDirective
{ after(grammarAccess.getIntegerDirectiveRule()); } 
	 EOF 
;

// Rule IntegerDirective
ruleIntegerDirective
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIntegerDirectiveAccess().getAlternatives()); }
(rule__IntegerDirective__Alternatives)
{ after(grammarAccess.getIntegerDirectiveAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStringDirective
entryRuleStringDirective 
:
{ before(grammarAccess.getStringDirectiveRule()); }
	 ruleStringDirective
{ after(grammarAccess.getStringDirectiveRule()); } 
	 EOF 
;

// Rule StringDirective
ruleStringDirective
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStringDirectiveAccess().getAlternatives()); }
(rule__StringDirective__Alternatives)
{ after(grammarAccess.getStringDirectiveAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleScopeType
entryRuleScopeType 
:
{ before(grammarAccess.getScopeTypeRule()); }
	 ruleScopeType
{ after(grammarAccess.getScopeTypeRule()); } 
	 EOF 
;

// Rule ScopeType
ruleScopeType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getScopeTypeAccess().getAlternatives()); }
(rule__ScopeType__Alternatives)
{ after(grammarAccess.getScopeTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__OnLoadBloc__Alternatives_20
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOnLoadBlocAccess().getCompactMicroAssignment_20_0()); }
(rule__OnLoadBloc__CompactMicroAssignment_20_0)
{ after(grammarAccess.getOnLoadBlocAccess().getCompactMicroAssignment_20_0()); }
)

    |(
{ before(grammarAccess.getOnLoadBlocAccess().getFalseKeyword_20_1()); }

	'false' 

{ after(grammarAccess.getOnLoadBlocAccess().getFalseKeyword_20_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Directive__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDirectiveAccess().getIntDirectiveParserRuleCall_1_0()); }
	ruleintDirective
{ after(grammarAccess.getDirectiveAccess().getIntDirectiveParserRuleCall_1_0()); }
)

    |(
{ before(grammarAccess.getDirectiveAccess().getStrDirectiveParserRuleCall_1_1()); }
	rulestrDirective
{ after(grammarAccess.getDirectiveAccess().getStrDirectiveParserRuleCall_1_1()); }
)

    |(
{ before(grammarAccess.getDirectiveAccess().getVarDirectiveParserRuleCall_1_2()); }
	rulevarDirective
{ after(grammarAccess.getDirectiveAccess().getVarDirectiveParserRuleCall_1_2()); }
)

    |(
{ before(grammarAccess.getDirectiveAccess().getConditionnalDirectiveParserRuleCall_1_3()); }
	ruleconditionnalDirective
{ after(grammarAccess.getDirectiveAccess().getConditionnalDirectiveParserRuleCall_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionnalDirective__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionnalDirectiveAccess().getIfDirectiveParserRuleCall_0()); }
	ruleifDirective
{ after(grammarAccess.getConditionnalDirectiveAccess().getIfDirectiveParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getConditionnalDirectiveAccess().getWaitDirectiveParserRuleCall_1()); }
	rulewaitDirective
{ after(grammarAccess.getConditionnalDirectiveAccess().getWaitDirectiveParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getConditionnalDirectiveAccess().getLockDirectiveParserRuleCall_2()); }
	rulelockDirective
{ after(grammarAccess.getConditionnalDirectiveAccess().getLockDirectiveParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorAccess().getEqualsSignEqualsSignKeyword_0()); }

	'==' 

{ after(grammarAccess.getOperatorAccess().getEqualsSignEqualsSignKeyword_0()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getExclamationMarkEqualsSignKeyword_1()); }

	'!=' 

{ after(grammarAccess.getOperatorAccess().getExclamationMarkEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerDirective__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerDirectiveAccess().getEMOTEKeyword_0()); }

	'EMOTE' 

{ after(grammarAccess.getIntegerDirectiveAccess().getEMOTEKeyword_0()); }
)

    |(
{ before(grammarAccess.getIntegerDirectiveAccess().getDIRECTIONKeyword_1()); }

	'DIRECTION' 

{ after(grammarAccess.getIntegerDirectiveAccess().getDIRECTIONKeyword_1()); }
)

    |(
{ before(grammarAccess.getIntegerDirectiveAccess().getMOVEMENTKeyword_2()); }

	'MOVEMENT' 

{ after(grammarAccess.getIntegerDirectiveAccess().getMOVEMENTKeyword_2()); }
)

    |(
{ before(grammarAccess.getIntegerDirectiveAccess().getGOTOKeyword_3()); }

	'GOTO' 

{ after(grammarAccess.getIntegerDirectiveAccess().getGOTOKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringDirective__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringDirectiveAccess().getCHATKeyword_0()); }

	'CHAT' 

{ after(grammarAccess.getStringDirectiveAccess().getCHATKeyword_0()); }
)

    |(
{ before(grammarAccess.getStringDirectiveAccess().getEFFETKeyword_1()); }

	'EFFET' 

{ after(grammarAccess.getStringDirectiveAccess().getEFFETKeyword_1()); }
)

    |(
{ before(grammarAccess.getStringDirectiveAccess().getVARKeyword_2()); }

	'VAR' 

{ after(grammarAccess.getStringDirectiveAccess().getVARKeyword_2()); }
)

    |(
{ before(grammarAccess.getStringDirectiveAccess().getIFKeyword_3()); }

	'IF' 

{ after(grammarAccess.getStringDirectiveAccess().getIFKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ScopeType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScopeTypeAccess().getTO_MAPKeyword_0()); }

	'TO_MAP' 

{ after(grammarAccess.getScopeTypeAccess().getTO_MAPKeyword_0()); }
)

    |(
{ before(grammarAccess.getScopeTypeAccess().getTO_TARGETKeyword_1()); }

	'TO_TARGET' 

{ after(grammarAccess.getScopeTypeAccess().getTO_TARGETKeyword_1()); }
)

    |(
{ before(grammarAccess.getScopeTypeAccess().getTO_SUBZONEKeyword_2()); }

	'TO_SUBZONE' 

{ after(grammarAccess.getScopeTypeAccess().getTO_SUBZONEKeyword_2()); }
)

    |(
{ before(grammarAccess.getScopeTypeAccess().getTO_ZONEKeyword_3()); }

	'TO_ZONE' 

{ after(grammarAccess.getScopeTypeAccess().getTO_ZONEKeyword_3()); }
)

    |(
{ before(grammarAccess.getScopeTypeAccess().getTO_SUPERZONEKeyword_4()); }

	'TO_SUPERZONE' 

{ after(grammarAccess.getScopeTypeAccess().getTO_SUPERZONEKeyword_4()); }
)

    |(
{ before(grammarAccess.getScopeTypeAccess().getTO_ALLKeyword_5()); }

	'TO_ALL' 

{ after(grammarAccess.getScopeTypeAccess().getTO_ALLKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Domain__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Domain__Group__0__Impl
	rule__Domain__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Domain__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDomainAccess().getElementsAssignment_0()); }
(rule__Domain__ElementsAssignment_0)
{ after(grammarAccess.getDomainAccess().getElementsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Domain__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Domain__Group__1__Impl
	rule__Domain__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Domain__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDomainAccess().getElementsAssignment_1()); }
(rule__Domain__ElementsAssignment_1)*
{ after(grammarAccess.getDomainAccess().getElementsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Domain__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Domain__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Domain__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDomainAccess().getElementsAssignment_2()); }
(rule__Domain__ElementsAssignment_2)*
{ after(grammarAccess.getDomainAccess().getElementsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Class__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Class__Group__0__Impl
	rule__Class__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassAccess().getClassKeyword_0()); }

	'class' 

{ after(grammarAccess.getClassAccess().getClassKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Class__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Class__Group__1__Impl
	rule__Class__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassAccess().getNameAssignment_1()); }
(rule__Class__NameAssignment_1)
{ after(grammarAccess.getClassAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Class__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Class__Group__2__Impl
	rule__Class__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassAccess().getGroup_2()); }
(rule__Class__Group_2__0)?
{ after(grammarAccess.getClassAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Class__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Class__Group__3__Impl
	rule__Class__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassAccess().getLeftCurlyBracketKeyword_3()); }

	'{' 

{ after(grammarAccess.getClassAccess().getLeftCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Class__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Class__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getClassAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Class__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Class__Group_2__0__Impl
	rule__Class__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassAccess().getExtendsKeyword_2_0()); }

	'extends' 

{ after(grammarAccess.getClassAccess().getExtendsKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Class__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Class__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassAccess().getSuperTypeAssignment_2_1()); }
(rule__Class__SuperTypeAssignment_2_1)
{ after(grammarAccess.getClassAccess().getSuperTypeAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OnLoadBloc__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OnLoadBloc__Group__0__Impl
	rule__OnLoadBloc__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OnLoadBloc__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOnLoadBlocAccess().getOnLoadKeyword_0()); }

	'onLoad' 

{ after(grammarAccess.getOnLoadBlocAccess().getOnLoadKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OnLoadBloc__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OnLoadBloc__Group__1__Impl
	rule__OnLoadBloc__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OnLoadBloc__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOnLoadBlocAccess().getLeftCurlyBracketKeyword_1()); }

	'{' 

{ after(grammarAccess.getOnLoadBlocAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OnLoadBloc__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OnLoadBloc__Group__2__Impl
	rule__OnLoadBloc__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__OnLoadBloc__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOnLoadBlocAccess().getFilePathKeyword_2()); }

	'filePath' 

{ after(grammarAccess.getOnLoadBlocAccess().getFilePathKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OnLoadBloc__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OnLoadBloc__Group__3__Impl
	rule__OnLoadBloc__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__OnLoadBloc__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOnLoadBlocAccess().getEqualsSignKeyword_3()); }

	'=' 

{ after(grammarAccess.getOnLoadBlocAccess().getEqualsSignKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OnLoadBloc__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OnLoadBloc__Group__4__Impl
	rule__OnLoadBloc__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__OnLoadBloc__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOnLoadBlocAccess().getFilePathAssignment_4()); }
(rule__OnLoadBloc__FilePathAssignment_4)
{ after(grammarAccess.getOnLoadBlocAccess().getFilePathAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OnLoadBloc__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OnLoadBloc__Group__5__Impl
	rule__OnLoadBloc__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__OnLoadBloc__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOnLoadBlocAccess().getSemicolonKeyword_5()); }

	';' 

{ after(grammarAccess.getOnLoadBlocAccess().getSemicolonKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OnLoadBloc__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OnLoadBloc__Group__6__Impl
	rule__OnLoadBloc__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__OnLoadBloc__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOnLoadBlocAccess().getFileNameKeyword_6()); }

	'fileName' 

{ after(grammarAccess.getOnLoadBlocAccess().getFileNameKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OnLoadBloc__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OnLoadBloc__Group__7__Impl
	rule__OnLoadBloc__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__OnLoadBloc__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOnLoadBlocAccess().getEqualsSignKeyword_7()); }

	'=' 

{ after(grammarAccess.getOnLoadBlocAccess().getEqualsSignKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OnLoadBloc__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OnLoadBloc__Group__8__Impl
	rule__OnLoadBloc__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__OnLoadBloc__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOnLoadBlocAccess().getFileNameAssignment_8()); }
(rule__OnLoadBloc__FileNameAssignment_8)
{ after(grammarAccess.getOnLoadBlocAccess().getFileNameAssignment_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OnLoadBloc__Group__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OnLoadBloc__Group__9__Impl
	rule__OnLoadBloc__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__OnLoadBloc__Group__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOnLoadBlocAccess().getSemicolonKeyword_9()); }

	';' 

{ after(grammarAccess.getOnLoadBlocAccess().getSemicolonKeyword_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OnLoadBloc__Group__10
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OnLoadBloc__Group__10__Impl
	rule__OnLoadBloc__Group__11
;
finally {
	restoreStackSize(stackSize);
}

rule__OnLoadBloc__Group__10__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOnLoadBlocAccess().getCharacterIDKeyword_10()); }

	'characterID' 

{ after(grammarAccess.getOnLoadBlocAccess().getCharacterIDKeyword_10()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OnLoadBloc__Group__11
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OnLoadBloc__Group__11__Impl
	rule__OnLoadBloc__Group__12
;
finally {
	restoreStackSize(stackSize);
}

rule__OnLoadBloc__Group__11__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOnLoadBlocAccess().getEqualsSignKeyword_11()); }

	'=' 

{ after(grammarAccess.getOnLoadBlocAccess().getEqualsSignKeyword_11()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OnLoadBloc__Group__12
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OnLoadBloc__Group__12__Impl
	rule__OnLoadBloc__Group__13
;
finally {
	restoreStackSize(stackSize);
}

rule__OnLoadBloc__Group__12__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOnLoadBlocAccess().getCharacterIDAssignment_12()); }
(rule__OnLoadBloc__CharacterIDAssignment_12)
{ after(grammarAccess.getOnLoadBlocAccess().getCharacterIDAssignment_12()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OnLoadBloc__Group__13
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OnLoadBloc__Group__13__Impl
	rule__OnLoadBloc__Group__14
;
finally {
	restoreStackSize(stackSize);
}

rule__OnLoadBloc__Group__13__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOnLoadBlocAccess().getSemicolonKeyword_13()); }

	';' 

{ after(grammarAccess.getOnLoadBlocAccess().getSemicolonKeyword_13()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OnLoadBloc__Group__14
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OnLoadBloc__Group__14__Impl
	rule__OnLoadBloc__Group__15
;
finally {
	restoreStackSize(stackSize);
}

rule__OnLoadBloc__Group__14__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOnLoadBlocAccess().getScopeKeyword_14()); }

	'scope' 

{ after(grammarAccess.getOnLoadBlocAccess().getScopeKeyword_14()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OnLoadBloc__Group__15
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OnLoadBloc__Group__15__Impl
	rule__OnLoadBloc__Group__16
;
finally {
	restoreStackSize(stackSize);
}

rule__OnLoadBloc__Group__15__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOnLoadBlocAccess().getEqualsSignKeyword_15()); }

	'=' 

{ after(grammarAccess.getOnLoadBlocAccess().getEqualsSignKeyword_15()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OnLoadBloc__Group__16
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OnLoadBloc__Group__16__Impl
	rule__OnLoadBloc__Group__17
;
finally {
	restoreStackSize(stackSize);
}

rule__OnLoadBloc__Group__16__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOnLoadBlocAccess().getScopeAssignment_16()); }
(rule__OnLoadBloc__ScopeAssignment_16)
{ after(grammarAccess.getOnLoadBlocAccess().getScopeAssignment_16()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OnLoadBloc__Group__17
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OnLoadBloc__Group__17__Impl
	rule__OnLoadBloc__Group__18
;
finally {
	restoreStackSize(stackSize);
}

rule__OnLoadBloc__Group__17__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOnLoadBlocAccess().getSemicolonKeyword_17()); }

	';' 

{ after(grammarAccess.getOnLoadBlocAccess().getSemicolonKeyword_17()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OnLoadBloc__Group__18
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OnLoadBloc__Group__18__Impl
	rule__OnLoadBloc__Group__19
;
finally {
	restoreStackSize(stackSize);
}

rule__OnLoadBloc__Group__18__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOnLoadBlocAccess().getCompatMicroKeyword_18()); }

	'compatMicro' 

{ after(grammarAccess.getOnLoadBlocAccess().getCompatMicroKeyword_18()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OnLoadBloc__Group__19
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OnLoadBloc__Group__19__Impl
	rule__OnLoadBloc__Group__20
;
finally {
	restoreStackSize(stackSize);
}

rule__OnLoadBloc__Group__19__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOnLoadBlocAccess().getEqualsSignKeyword_19()); }

	'=' 

{ after(grammarAccess.getOnLoadBlocAccess().getEqualsSignKeyword_19()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OnLoadBloc__Group__20
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OnLoadBloc__Group__20__Impl
	rule__OnLoadBloc__Group__21
;
finally {
	restoreStackSize(stackSize);
}

rule__OnLoadBloc__Group__20__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOnLoadBlocAccess().getAlternatives_20()); }
(rule__OnLoadBloc__Alternatives_20)
{ after(grammarAccess.getOnLoadBlocAccess().getAlternatives_20()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OnLoadBloc__Group__21
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OnLoadBloc__Group__21__Impl
	rule__OnLoadBloc__Group__22
;
finally {
	restoreStackSize(stackSize);
}

rule__OnLoadBloc__Group__21__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOnLoadBlocAccess().getSemicolonKeyword_21()); }

	';' 

{ after(grammarAccess.getOnLoadBlocAccess().getSemicolonKeyword_21()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OnLoadBloc__Group__22
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OnLoadBloc__Group__22__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OnLoadBloc__Group__22__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOnLoadBlocAccess().getRightCurlyBracketKeyword_22()); }

	'}' 

{ after(grammarAccess.getOnLoadBlocAccess().getRightCurlyBracketKeyword_22()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















































rule__Bloc__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Bloc__Group__0__Impl
	rule__Bloc__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Bloc__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlocAccess().getBlocKeyword_0()); }

	'bloc #' 

{ after(grammarAccess.getBlocAccess().getBlocKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Bloc__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Bloc__Group__1__Impl
	rule__Bloc__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Bloc__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlocAccess().getNameAssignment_1()); }
(rule__Bloc__NameAssignment_1)
{ after(grammarAccess.getBlocAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Bloc__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Bloc__Group__2__Impl
	rule__Bloc__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Bloc__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlocAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getBlocAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Bloc__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Bloc__Group__3__Impl
	rule__Bloc__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Bloc__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlocAccess().getDirectivesAssignment_3()); }
(rule__Bloc__DirectivesAssignment_3)*
{ after(grammarAccess.getBlocAccess().getDirectivesAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Bloc__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Bloc__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Bloc__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlocAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getBlocAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Directive__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Directive__Group__0__Impl
	rule__Directive__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Directive__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDirectiveAccess().getDirKeyword_0()); }

	'dir' 

{ after(grammarAccess.getDirectiveAccess().getDirKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Directive__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Directive__Group__1__Impl
	rule__Directive__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Directive__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDirectiveAccess().getAlternatives_1()); }
(rule__Directive__Alternatives_1)
{ after(grammarAccess.getDirectiveAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Directive__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Directive__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Directive__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDirectiveAccess().getSemicolonKeyword_2()); }

	';' 

{ after(grammarAccess.getDirectiveAccess().getSemicolonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__StrDirective__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StrDirective__Group__0__Impl
	rule__StrDirective__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StrDirective__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStrDirectiveAccess().getNameAssignment_0()); }
(rule__StrDirective__NameAssignment_0)
{ after(grammarAccess.getStrDirectiveAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StrDirective__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StrDirective__Group__1__Impl
	rule__StrDirective__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StrDirective__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStrDirectiveAccess().getColonKeyword_1()); }

	':' 

{ after(grammarAccess.getStrDirectiveAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StrDirective__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StrDirective__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StrDirective__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStrDirectiveAccess().getValueAssignment_2()); }
(rule__StrDirective__ValueAssignment_2)
{ after(grammarAccess.getStrDirectiveAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__IntDirective__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntDirective__Group__0__Impl
	rule__IntDirective__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IntDirective__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntDirectiveAccess().getNameAssignment_0()); }
(rule__IntDirective__NameAssignment_0)
{ after(grammarAccess.getIntDirectiveAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IntDirective__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntDirective__Group__1__Impl
	rule__IntDirective__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IntDirective__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntDirectiveAccess().getColonKeyword_1()); }

	':' 

{ after(grammarAccess.getIntDirectiveAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IntDirective__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntDirective__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IntDirective__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntDirectiveAccess().getValueAssignment_2()); }
(rule__IntDirective__ValueAssignment_2)
{ after(grammarAccess.getIntDirectiveAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__VarDirective__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarDirective__Group__0__Impl
	rule__VarDirective__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDirective__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDirectiveAccess().getNameAssignment_0()); }
(rule__VarDirective__NameAssignment_0)
{ after(grammarAccess.getVarDirectiveAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VarDirective__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarDirective__Group__1__Impl
	rule__VarDirective__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDirective__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDirectiveAccess().getColonKeyword_1()); }

	':' 

{ after(grammarAccess.getVarDirectiveAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VarDirective__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarDirective__Group__2__Impl
	rule__VarDirective__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDirective__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDirectiveAccess().getLeftAssignment_2()); }
(rule__VarDirective__LeftAssignment_2)
{ after(grammarAccess.getVarDirectiveAccess().getLeftAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VarDirective__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarDirective__Group__3__Impl
	rule__VarDirective__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDirective__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDirectiveAccess().getEqualsSignKeyword_3()); }

	'=' 

{ after(grammarAccess.getVarDirectiveAccess().getEqualsSignKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VarDirective__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarDirective__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDirective__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDirectiveAccess().getRightAssignment_4()); }
(rule__VarDirective__RightAssignment_4)
{ after(grammarAccess.getVarDirectiveAccess().getRightAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__IfDirective__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfDirective__Group__0__Impl
	rule__IfDirective__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfDirective__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfDirectiveAccess().getNameAssignment_0()); }
(rule__IfDirective__NameAssignment_0)
{ after(grammarAccess.getIfDirectiveAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfDirective__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfDirective__Group__1__Impl
	rule__IfDirective__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfDirective__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfDirectiveAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getIfDirectiveAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfDirective__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfDirective__Group__2__Impl
	rule__IfDirective__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfDirective__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfDirectiveAccess().getLeftAssignment_2()); }
(rule__IfDirective__LeftAssignment_2)
{ after(grammarAccess.getIfDirectiveAccess().getLeftAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfDirective__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfDirective__Group__3__Impl
	rule__IfDirective__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IfDirective__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfDirectiveAccess().getOperatorAssignment_3()); }
(rule__IfDirective__OperatorAssignment_3)
{ after(grammarAccess.getIfDirectiveAccess().getOperatorAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfDirective__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfDirective__Group__4__Impl
	rule__IfDirective__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__IfDirective__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfDirectiveAccess().getRightAssignment_4()); }
(rule__IfDirective__RightAssignment_4)
{ after(grammarAccess.getIfDirectiveAccess().getRightAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfDirective__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfDirective__Group__5__Impl
	rule__IfDirective__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__IfDirective__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfDirectiveAccess().getRightParenthesisKeyword_5()); }

	')' 

{ after(grammarAccess.getIfDirectiveAccess().getRightParenthesisKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfDirective__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfDirective__Group__6__Impl
	rule__IfDirective__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__IfDirective__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfDirectiveAccess().getLeftCurlyBracketKeyword_6()); }
(
	'{' 
)?
{ after(grammarAccess.getIfDirectiveAccess().getLeftCurlyBracketKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfDirective__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfDirective__Group__7__Impl
	rule__IfDirective__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__IfDirective__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfDirectiveAccess().getDirectivesAssignment_7()); }
(rule__IfDirective__DirectivesAssignment_7)*
{ after(grammarAccess.getIfDirectiveAccess().getDirectivesAssignment_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfDirective__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfDirective__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfDirective__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfDirectiveAccess().getRightCurlyBracketKeyword_8()); }
(
	'}' 
)?
{ after(grammarAccess.getIfDirectiveAccess().getRightCurlyBracketKeyword_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}




















rule__WaitDirective__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WaitDirective__Group__0__Impl
	rule__WaitDirective__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WaitDirective__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWaitDirectiveAccess().getNameAssignment_0()); }
(rule__WaitDirective__NameAssignment_0)
{ after(grammarAccess.getWaitDirectiveAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WaitDirective__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WaitDirective__Group__1__Impl
	rule__WaitDirective__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__WaitDirective__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWaitDirectiveAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getWaitDirectiveAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WaitDirective__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WaitDirective__Group__2__Impl
	rule__WaitDirective__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__WaitDirective__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWaitDirectiveAccess().getTimeAssignment_2()); }
(rule__WaitDirective__TimeAssignment_2)
{ after(grammarAccess.getWaitDirectiveAccess().getTimeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WaitDirective__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WaitDirective__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WaitDirective__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWaitDirectiveAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getWaitDirectiveAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__LockDirective__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LockDirective__Group__0__Impl
	rule__LockDirective__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LockDirective__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLockDirectiveAccess().getNameAssignment_0()); }
(rule__LockDirective__NameAssignment_0)
{ after(grammarAccess.getLockDirectiveAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LockDirective__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LockDirective__Group__1__Impl
	rule__LockDirective__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LockDirective__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLockDirectiveAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getLockDirectiveAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LockDirective__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LockDirective__Group__2__Impl
	rule__LockDirective__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LockDirective__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLockDirectiveAccess().getVariableAssignment_2()); }
(rule__LockDirective__VariableAssignment_2)
{ after(grammarAccess.getLockDirectiveAccess().getVariableAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LockDirective__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LockDirective__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LockDirective__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLockDirectiveAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getLockDirectiveAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}











rule__Domain__ElementsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDomainAccess().getElementsOnLoadBlocParserRuleCall_0_0()); }
	ruleonLoadBloc{ after(grammarAccess.getDomainAccess().getElementsOnLoadBlocParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Domain__ElementsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDomainAccess().getElementsBlocParserRuleCall_1_0()); }
	ruleBloc{ after(grammarAccess.getDomainAccess().getElementsBlocParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Domain__ElementsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDomainAccess().getElementsClassParserRuleCall_2_0()); }
	ruleClass{ after(grammarAccess.getDomainAccess().getElementsClassParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Class__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getClassAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Class__SuperTypeAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassAccess().getSuperTypeClassParserRuleCall_2_1_0()); }
	ruleClass{ after(grammarAccess.getClassAccess().getSuperTypeClassParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OnLoadBloc__FilePathAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOnLoadBlocAccess().getFilePathSTRINGTerminalRuleCall_4_0()); }
	RULE_STRING{ after(grammarAccess.getOnLoadBlocAccess().getFilePathSTRINGTerminalRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OnLoadBloc__FileNameAssignment_8
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOnLoadBlocAccess().getFileNameSTRINGTerminalRuleCall_8_0()); }
	RULE_STRING{ after(grammarAccess.getOnLoadBlocAccess().getFileNameSTRINGTerminalRuleCall_8_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OnLoadBloc__CharacterIDAssignment_12
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOnLoadBlocAccess().getCharacterIDINTTerminalRuleCall_12_0()); }
	RULE_INT{ after(grammarAccess.getOnLoadBlocAccess().getCharacterIDINTTerminalRuleCall_12_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OnLoadBloc__ScopeAssignment_16
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOnLoadBlocAccess().getScopeScopeTypeParserRuleCall_16_0()); }
	ruleScopeType{ after(grammarAccess.getOnLoadBlocAccess().getScopeScopeTypeParserRuleCall_16_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OnLoadBloc__CompactMicroAssignment_20_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOnLoadBlocAccess().getCompactMicroTrueKeyword_20_0_0()); }
(
{ before(grammarAccess.getOnLoadBlocAccess().getCompactMicroTrueKeyword_20_0_0()); }

	'true' 

{ after(grammarAccess.getOnLoadBlocAccess().getCompactMicroTrueKeyword_20_0_0()); }
)

{ after(grammarAccess.getOnLoadBlocAccess().getCompactMicroTrueKeyword_20_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Bloc__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlocAccess().getNameINTTerminalRuleCall_1_0()); }
	RULE_INT{ after(grammarAccess.getBlocAccess().getNameINTTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Bloc__DirectivesAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlocAccess().getDirectivesDirectiveParserRuleCall_3_0()); }
	ruleDirective{ after(grammarAccess.getBlocAccess().getDirectivesDirectiveParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StrDirective__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStrDirectiveAccess().getNameStringDirectiveParserRuleCall_0_0()); }
	ruleStringDirective{ after(grammarAccess.getStrDirectiveAccess().getNameStringDirectiveParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StrDirective__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStrDirectiveAccess().getValueSTRINGTerminalRuleCall_2_0()); }
	RULE_STRING{ after(grammarAccess.getStrDirectiveAccess().getValueSTRINGTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntDirective__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntDirectiveAccess().getNameIntegerDirectiveParserRuleCall_0_0()); }
	ruleIntegerDirective{ after(grammarAccess.getIntDirectiveAccess().getNameIntegerDirectiveParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntDirective__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntDirectiveAccess().getValueINTTerminalRuleCall_2_0()); }
	RULE_INT{ after(grammarAccess.getIntDirectiveAccess().getValueINTTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VarDirective__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDirectiveAccess().getNameVARKeyword_0_0()); }
(
{ before(grammarAccess.getVarDirectiveAccess().getNameVARKeyword_0_0()); }

	'VAR' 

{ after(grammarAccess.getVarDirectiveAccess().getNameVARKeyword_0_0()); }
)

{ after(grammarAccess.getVarDirectiveAccess().getNameVARKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VarDirective__LeftAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDirectiveAccess().getLeftIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getVarDirectiveAccess().getLeftIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VarDirective__RightAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDirectiveAccess().getRightIDTerminalRuleCall_4_0()); }
	RULE_ID{ after(grammarAccess.getVarDirectiveAccess().getRightIDTerminalRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfDirective__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfDirectiveAccess().getNameIFKeyword_0_0()); }
(
{ before(grammarAccess.getIfDirectiveAccess().getNameIFKeyword_0_0()); }

	'IF' 

{ after(grammarAccess.getIfDirectiveAccess().getNameIFKeyword_0_0()); }
)

{ after(grammarAccess.getIfDirectiveAccess().getNameIFKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfDirective__LeftAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfDirectiveAccess().getLeftIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getIfDirectiveAccess().getLeftIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfDirective__OperatorAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfDirectiveAccess().getOperatorOperatorParserRuleCall_3_0()); }
	ruleoperator{ after(grammarAccess.getIfDirectiveAccess().getOperatorOperatorParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfDirective__RightAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfDirectiveAccess().getRightIDTerminalRuleCall_4_0()); }
	RULE_ID{ after(grammarAccess.getIfDirectiveAccess().getRightIDTerminalRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfDirective__DirectivesAssignment_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfDirectiveAccess().getDirectivesDirectiveParserRuleCall_7_0()); }
	ruleDirective{ after(grammarAccess.getIfDirectiveAccess().getDirectivesDirectiveParserRuleCall_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WaitDirective__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWaitDirectiveAccess().getNameWAITKeyword_0_0()); }
(
{ before(grammarAccess.getWaitDirectiveAccess().getNameWAITKeyword_0_0()); }

	'WAIT' 

{ after(grammarAccess.getWaitDirectiveAccess().getNameWAITKeyword_0_0()); }
)

{ after(grammarAccess.getWaitDirectiveAccess().getNameWAITKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WaitDirective__TimeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWaitDirectiveAccess().getTimeINTTerminalRuleCall_2_0()); }
	RULE_INT{ after(grammarAccess.getWaitDirectiveAccess().getTimeINTTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LockDirective__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLockDirectiveAccess().getNameLOCKKeyword_0_0()); }
(
{ before(grammarAccess.getLockDirectiveAccess().getNameLOCKKeyword_0_0()); }

	'LOCK' 

{ after(grammarAccess.getLockDirectiveAccess().getNameLOCKKeyword_0_0()); }
)

{ after(grammarAccess.getLockDirectiveAccess().getNameLOCKKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LockDirective__VariableAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLockDirectiveAccess().getVariableIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getLockDirectiveAccess().getVariableIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


