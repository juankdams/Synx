/*
* generated by Xtext
*/
package macroscipting.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import macroscipting.services.MacroGrammarAccess;

public class MacroParser extends AbstractContentAssistParser {
	
	@Inject
	private MacroGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected macroscipting.ui.contentassist.antlr.internal.InternalMacroParser createParser() {
		macroscipting.ui.contentassist.antlr.internal.InternalMacroParser result = new macroscipting.ui.contentassist.antlr.internal.InternalMacroParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getOnLoadBlocAccess().getAlternatives_20(), "rule__OnLoadBloc__Alternatives_20");
					put(grammarAccess.getDirectiveAccess().getAlternatives_1(), "rule__Directive__Alternatives_1");
					put(grammarAccess.getConditionnalDirectiveAccess().getAlternatives(), "rule__ConditionnalDirective__Alternatives");
					put(grammarAccess.getOperatorAccess().getAlternatives(), "rule__Operator__Alternatives");
					put(grammarAccess.getIntegerDirectiveAccess().getAlternatives(), "rule__IntegerDirective__Alternatives");
					put(grammarAccess.getStringDirectiveAccess().getAlternatives(), "rule__StringDirective__Alternatives");
					put(grammarAccess.getScopeTypeAccess().getAlternatives(), "rule__ScopeType__Alternatives");
					put(grammarAccess.getDomainAccess().getGroup(), "rule__Domain__Group__0");
					put(grammarAccess.getClassAccess().getGroup(), "rule__Class__Group__0");
					put(grammarAccess.getClassAccess().getGroup_2(), "rule__Class__Group_2__0");
					put(grammarAccess.getOnLoadBlocAccess().getGroup(), "rule__OnLoadBloc__Group__0");
					put(grammarAccess.getBlocAccess().getGroup(), "rule__Bloc__Group__0");
					put(grammarAccess.getDirectiveAccess().getGroup(), "rule__Directive__Group__0");
					put(grammarAccess.getStrDirectiveAccess().getGroup(), "rule__StrDirective__Group__0");
					put(grammarAccess.getIntDirectiveAccess().getGroup(), "rule__IntDirective__Group__0");
					put(grammarAccess.getVarDirectiveAccess().getGroup(), "rule__VarDirective__Group__0");
					put(grammarAccess.getIfDirectiveAccess().getGroup(), "rule__IfDirective__Group__0");
					put(grammarAccess.getWaitDirectiveAccess().getGroup(), "rule__WaitDirective__Group__0");
					put(grammarAccess.getLockDirectiveAccess().getGroup(), "rule__LockDirective__Group__0");
					put(grammarAccess.getDomainAccess().getElementsAssignment_0(), "rule__Domain__ElementsAssignment_0");
					put(grammarAccess.getDomainAccess().getElementsAssignment_1(), "rule__Domain__ElementsAssignment_1");
					put(grammarAccess.getDomainAccess().getElementsAssignment_2(), "rule__Domain__ElementsAssignment_2");
					put(grammarAccess.getClassAccess().getNameAssignment_1(), "rule__Class__NameAssignment_1");
					put(grammarAccess.getClassAccess().getSuperTypeAssignment_2_1(), "rule__Class__SuperTypeAssignment_2_1");
					put(grammarAccess.getOnLoadBlocAccess().getFilePathAssignment_4(), "rule__OnLoadBloc__FilePathAssignment_4");
					put(grammarAccess.getOnLoadBlocAccess().getFileNameAssignment_8(), "rule__OnLoadBloc__FileNameAssignment_8");
					put(grammarAccess.getOnLoadBlocAccess().getCharacterIDAssignment_12(), "rule__OnLoadBloc__CharacterIDAssignment_12");
					put(grammarAccess.getOnLoadBlocAccess().getScopeAssignment_16(), "rule__OnLoadBloc__ScopeAssignment_16");
					put(grammarAccess.getOnLoadBlocAccess().getCompactMicroAssignment_20_0(), "rule__OnLoadBloc__CompactMicroAssignment_20_0");
					put(grammarAccess.getBlocAccess().getNameAssignment_1(), "rule__Bloc__NameAssignment_1");
					put(grammarAccess.getBlocAccess().getDirectivesAssignment_3(), "rule__Bloc__DirectivesAssignment_3");
					put(grammarAccess.getStrDirectiveAccess().getNameAssignment_0(), "rule__StrDirective__NameAssignment_0");
					put(grammarAccess.getStrDirectiveAccess().getValueAssignment_2(), "rule__StrDirective__ValueAssignment_2");
					put(grammarAccess.getIntDirectiveAccess().getNameAssignment_0(), "rule__IntDirective__NameAssignment_0");
					put(grammarAccess.getIntDirectiveAccess().getValueAssignment_2(), "rule__IntDirective__ValueAssignment_2");
					put(grammarAccess.getVarDirectiveAccess().getNameAssignment_0(), "rule__VarDirective__NameAssignment_0");
					put(grammarAccess.getVarDirectiveAccess().getLeftAssignment_2(), "rule__VarDirective__LeftAssignment_2");
					put(grammarAccess.getVarDirectiveAccess().getRightAssignment_4(), "rule__VarDirective__RightAssignment_4");
					put(grammarAccess.getIfDirectiveAccess().getNameAssignment_0(), "rule__IfDirective__NameAssignment_0");
					put(grammarAccess.getIfDirectiveAccess().getLeftAssignment_2(), "rule__IfDirective__LeftAssignment_2");
					put(grammarAccess.getIfDirectiveAccess().getOperatorAssignment_3(), "rule__IfDirective__OperatorAssignment_3");
					put(grammarAccess.getIfDirectiveAccess().getRightAssignment_4(), "rule__IfDirective__RightAssignment_4");
					put(grammarAccess.getIfDirectiveAccess().getDirectivesAssignment_7(), "rule__IfDirective__DirectivesAssignment_7");
					put(grammarAccess.getWaitDirectiveAccess().getNameAssignment_0(), "rule__WaitDirective__NameAssignment_0");
					put(grammarAccess.getWaitDirectiveAccess().getTimeAssignment_2(), "rule__WaitDirective__TimeAssignment_2");
					put(grammarAccess.getLockDirectiveAccess().getNameAssignment_0(), "rule__LockDirective__NameAssignment_0");
					put(grammarAccess.getLockDirectiveAccess().getVariableAssignment_2(), "rule__LockDirective__VariableAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			macroscipting.ui.contentassist.antlr.internal.InternalMacroParser typedParser = (macroscipting.ui.contentassist.antlr.internal.InternalMacroParser) parser;
			typedParser.entryRuleDomain();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public MacroGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(MacroGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
