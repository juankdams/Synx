package Game;

import io.netty.buffer.ByteBuf;
import io.netty.channel.Channel;
import io.netty.channel.ChannelHandlerContext;
import io.netty.util.AttributeKey;
import Core.Syn;
import Handlers.NettyHandler;
import Login.WakfuLoginClient;
import Game.*;

public class WakfuGameHandler extends NettyHandler {
	
	private static final AttributeKey<WakfuGameClient> GAMECLIENT_ATTR = new AttributeKey<WakfuGameClient>("GameClient");

	private WakfuGameServer server = null;
	
	public WakfuGameHandler(WakfuGameServer wakfuGameServer) {
		server = wakfuGameServer;
	}

	@Override
	public void channelActive(ChannelHandlerContext ctx) throws Exception {
		Channel c = ctx.channel();
		c.attr(GAMECLIENT_ATTR).setIfAbsent(new WakfuGameClient(c));
		Syn.d("[w] A new game channel is active: " + ctx.channel());
	}
	
	@Override
	public void channelInactive(ChannelHandlerContext ctx) throws Exception {
		WakfuGameClient sess = ctx.channel().attr(GAMECLIENT_ATTR).get();
		Syn.d("[w] Channel inactive: " + sess);
		//TODO: deregister from list
 	}
	
    @Override
    public void inboundBufferUpdated(ChannelHandlerContext ctx, ByteBuf msg) {
    	WakfuGameClient sess = ctx.channel().attr(GAMECLIENT_ATTR).get();
		
		if (sess != null && msg.readableBytes() > 0) {
			int size = msg.readUnsignedShort();
			int type = msg.readByte();
			int opcode = msg.readUnsignedShort();
			
			Syn.wD("[w] Incoming packet. Size: " + size + ", Type: " + type + ", Opcode: " + opcode);
			
			Syn.Services.wakfuClientStrategy.defaultPluginsManager
			.getParsingManager().parse(sess, msg);
			
		}
    }

	public void setServer(WakfuGameServer server) {
		this.server = server;
	}
	public WakfuGameServer getServer() {
		return server;
	}
	

}
