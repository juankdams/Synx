package Providers;

import static GameObjects.GMonsterGroup.MonsterGroupType.HEROIC_INSTANCE;
import static GameObjects.GMonsterGroup.MonsterGroupType.SUBAREA_GENERATED;

import java.util.ArrayList;

import Game.GServer;
import GameObjects.GMonster;
import GameObjects.GMonsterGroup;
import GameObjects.GWorld;
import GameObjects.GMonsterGroup.MonsterGroupType;
import GlobalObjects.GlobalWorld;
import Interfaces.IProvider;
import Misc.StringUtils;

public class GMonsterGroupProvider implements IProvider {
	/**
	 * Créé un nouveau groupe de monstres avec grades aléatoires contenant des templates de monstres. <br>
	 * Se fait au chargement de la map, quand on génère des groupes aléatoires aec les possibleMobs de la subArea :) */
	public GMonsterGroup createNew(GWorld w, short size){
		GMonsterGroup mg = new GMonsterGroup();
		mg.setMonsters(new ArrayList<GMonster>(size));
		mg.setType(SUBAREA_GENERATED);
		mg.setID(w.getNextCharacterID());
		mg.setServer(w.getServer());
		mg.setStars(Constants.Constants.ZERO_SHORT);
		
		/*if(mobTemplateIDs != null && mobTemplateIDs.length > 0 && mobTemplateIDs[0].equals("") == false){
			mg.setmonsters(new ArrayList<GMonster>());
			for(String str : mobTemplateIDs){
				short id = Short.parseShort(str);
				GMonster[] monsterGrades = GlobalWorld.getMonsterTemplate(s.getWorld(), id);
				mg.getmonsters().add(  monsterGrades[ Randomizer.rand(0, monsterGrades.length-1) ]  );
			}
		}*/
		return mg;
	}
	
	/**
	 * Créé un nouveau groupe de monstre contenant des instances de monstres à la fin d'un combat.
	 * (Ex les monstres qui droppent les items des joueurs sur l'héroique) */
	public GMonsterGroup createNewInstance(ArrayList<GMonster> monsters, String[] drops, GServer s){
		GMonsterGroup mg = new GMonsterGroup();
		mg.setType(HEROIC_INSTANCE);
		mg.setID(s.getWorld().getNextCharacterID());
		mg.setServer(s);
		mg.setMonsters(monsters);
		mg.setStars(Constants.Constants.ZERO_SHORT);
		mg.setDrops(drops);
		return mg;
	}

	/**
	 * Recharge une instance de groupe déjà existante ainsi que ses instances de monstres déjà existants.
	 * (Ex les monstres qui droppent les items des joueurs sur l'héroique) <br>
	 * Utilisé seulement par SQL.loadGroupsInstances qui lui même est utilisé pas SQL.Maps.load, <br>
	 * ce qui est la source de la chaîne pour le chargement des instances de groupes monstres */
	public GMonsterGroup loadInstance(short groupID, String monstersIDs, String type, GWorld w){
		GMonsterGroup mg = new GMonsterGroup();
		mg.setMonsters(new ArrayList<GMonster>((short) StringUtils.count(monstersIDs, ',')));
		mg.setType(MonsterGroupType.valueOf(type));
		mg.setID(groupID > 0 ? -groupID : groupID);
		mg.setStars(Constants.Constants.ZERO_SHORT);
		if(w != null){
			mg.setServer(w.getServer());
		}
		//Syn.d("mobGroup.loadInstance, getServerID="+mg.getServerID());
		if(monstersIDs != null && monstersIDs.length() > 0){
			for(String str : monstersIDs.split(",")){
				int total = Short.parseShort(str);
				short templateid = (short) Math.floor(total / 10);
				int grade = total - (templateid * 10);
				//Syn.d("searched templateid:"+templateid);
				//Syn.d("searched grade:"+grade);
				GMonster m = GlobalWorld.getMonsterTemplate(w, templateid)[grade];
				mg.add( m );
			}
			//ArrayList<GMonster> monsters = SQL.Monsters.loadInstance(mobInstancesIDs, w);
			//mg.setmonsters( monsters );
		}
		return mg;
	}
	
}