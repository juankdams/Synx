package Servers.Netty;

import io.netty.buffer.ByteBuf;
import io.netty.channel.ChannelHandlerContext;
import io.netty.handler.codec.MessageToMessageDecoder;

import java.util.HashMap;

import org.slf4j.Logger;

public abstract class Decoder extends MessageToMessageDecoder<ByteBuf, ByteBuf> {
	
	public Decoder() {
		super(ByteBuf.class);
	}

	@Override
	public ByteBuf decode(ChannelHandlerContext ctx, ByteBuf msg) throws Exception {
		ClientSession sess = ctx.channel().attr(GameServerHandler.CLIENTSESS_ATTR).get();
		if (sess != null && msg.readableBytes() > 0) {
			int size = msg.readUnsignedShort();
			int type = msg.readByte();
			int opcode = msg.readUnsignedShort();
			
			if (INCOMING_PACKET_MAP.containsKey(opcode)) {
				INCOMING_PACKET_MAP.get(opcode).decode(sess, msg, size);
			} else {
				logger.info("Incoming packet. Size: " + size + ", Type: " + type + ", Opcode: " + opcode);
			}
		}
		
		return msg;
	}
	
}