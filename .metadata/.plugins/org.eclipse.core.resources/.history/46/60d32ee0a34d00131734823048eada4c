package pack;

import plugin.Plugin;
import plugin.event.Event;
import plugin.event.PluginListener;
import Core.Syn;
import GameClientStrategies.GameClientStrategies;
import parsers.dofus.*;
import parsers.wakfu.*;
import Plugins.Managers.ParsingManager;
import Plugins.Managers.PluginsManager;
import ZPlug.MiscEvent;
import ZPlug.Vars;

public class ParsingMain extends Plugin implements PluginListener {

	public Vars v = new Vars();
	public PluginsManager pm = null;
	public GameClientStrategies strategy = null;
	
	@Override
	public void onLoad() {
		Syn.wD("   ParsingPlugin.onLoad");
		setGreatVars();
		registerEvents();
	}

	@Override
	public void onEnable() {
		Syn.wD("   ParsingPlugin.onEnable");
		initiateActionListenersAlias();
		initiateParsers();
	}
	
	@Override
	public void onDisable() {
		Syn.wD("   ParsingPlugin.onDisable");
	}

	@Override
	public void unload() {
		pm.getAdapter().getParsingManager().unload();
		v = null;
	}
	
	@Override
	public void registerEvents() {
		this.getPluginManager().registerEvent(MiscEvent.Load_Plugins_ActionListenersAlias, v.listener);
		this.getPluginManager().registerEvent(MiscEvent.Set_GameServer, v.listener);
		this.getPluginManager().registerEvent(MiscEvent.Set_PluginsManager, v.listener);
		this.getPluginManager().registerEvent(MiscEvent.Set_GameClientStrategy, v.listener);
	}

	@Override
	public void unRegisterEvents() {
		this.getPluginManager().removeEvent(MiscEvent.Load_Plugins_ActionListenersAlias, v.listener);
		this.getPluginManager().removeEvent(MiscEvent.Set_GameServer, v.listener);
		this.getPluginManager().removeEvent(MiscEvent.Set_PluginsManager, v.listener);
		this.getPluginManager().registerEvent(MiscEvent.Set_GameClientStrategy, v.listener);
	}
	
	private void setGreatVars() {
		v.unrecognizedCommand = this.getInformation().getName()+v.unrecognizedCommand+this.getInformation().getName()+"Plugin";
		v.unrecognizedEvent = this.getInformation().getName()+v.unrecognizedEvent+this.getInformation().getName()+"Plugin";
		v.pluginEnabled = this.getInformation().getName()+v.pluginEnabled;
		v.pluginDisabled = this.getInformation().getName()+v.pluginDisabled;
		v.listener = this;
	}

	@Override
	public Event execute(Event event) {
		if(event.getEventType() == MiscEvent.Load_Plugins_ActionListenersAlias){
			initiateActionListenersAlias();	
		}
		if(event.getEventType() == MiscEvent.Set_GameServer){
			//s = (DofusGameServer) event.getSource();
		}
		if(event.getEventType() == MiscEvent.Set_PluginsManager){
			pm = (PluginsManager) event.getSource();
		}
		if(event.getEventType() == MiscEvent.Set_GameClientStrategy){
			strategy = (GameClientStrategies) event.getSource();
			initiateParsers();
		}
		return event;
	}
	
	public void initiateParsers(){
		if(strategy == GameClientStrategies.DofusClientStrategy){
			
		}else
		if(strategy == GameClientStrategies.WakfuClientStrategy){
			initiateWakfuParsers();
		}
	}
	
	public void initiateWakfuParsers(){
		ParsingManager pam = pm.getAdapter().getParsingManager();
		pam.getParsers().clear();
		pam
		.setParser('@', new CrystalParser())
		.setParser('A', new AccountParser())
		//'a'
		.setParser('B', new BasicParser())
		//'b'
		.setParser('C', new ConquestParser())
		.setParser('c', new ChatParser())
		
		.setParser('D', new DialogsParser())
		.setParser('d', new DocumentsParser())
		
		.setParser('E', new ExchangesParser())
		.setParser('e', new EnvironmentParser())
		
		.setParser('F', new RelationsParser())
		.setParser('f', new FightsParser())

		.setParser('G', new GameParser())
		.setParser('g', new GuildsParser())
		//'H'
		.setParser('h', new HousesParser())
		
		.setParser('I', new InformationsParser())
		.setParser('i', pam.getParser('F'))//reprend le mÃªme RelationsParser que pour les Friends
		
		.setParser('J', new JobsParser())
		//'j'
		.setParser('K', new KeyParser())
		//'k'
		//'l', 'm', 'n' 
		.setParser('O', new ObjectsParser())
		//'o'
		.setParser('P', new PartyParser())
		.setParser('p', new PingParser())
		
		.setParser('Q', new QuestsParser())
		.setParser('q', pam.getParser('p'))//reprend le PingParser
		
		.setParser('R', new RidesParser())
		.setParser('r', pam.getParser('p'))
		
		.setParser('S', new SpellsParser())
		//'s'
		.setParser('T', new TutorialsParser())
		//'t'
		//'u, 'U', 'v', 'V'
		.setParser('W', new WayPointsParser())
		//'w'
		//'x', 'X', 'y', 'Y', 'z', 'Z'
		;
	}
	
	 
	public void initiateActionListenersAlias(){
		pm.getActionsManager().putActionListenerAlias("OM", "ON_ITEM_MOVEMENT");
		pm.getActionsManager().putActionListenerAlias("OD", "ON_ITEM_DROP");
		pm.getActionsManager().putActionListenerAlias("Od", "ON_ITEM_DELETE");
		pm.getActionsManager().putActionListenerAlias("OU", "ON_ITEM_USE");//no Confirmation required.
		pm.getActionsManager().putActionListenerAlias("Ou", "ON_ITEM_USE");//askConfirmation
		pm.getActionsManager().putActionListenerAlias("Ox", "ON_ITEM_DISSOCIATE");
		pm.getActionsManager().putActionListenerAlias("Os", "ON_ITEM_SETSKIN");
		pm.getActionsManager().putActionListenerAlias("Of", "ON_ITEM_FEED");
	}


	
	

	
	
	
}
