package GameObjects;

import java.util.ArrayList;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import Abstractions.AbstractWorld;
import Constants.CItems;
import Constants.Constants;
import Enums.Condition;
import Enums.ItemPosition;
import Game.GameServer;
import GlobalObjects.ItemSet;
import Interfaces.IStorage;
import Misc.Tests.Perfs;
import Misc.Utils;
import Plugins.Managers.EffectsManager;
import Plugins.Managers.PluginsManager;
import Providers.GInventoryProvider;

public class GInventory implements IStorage{
	public static Logger log = LoggerFactory.getLogger(GInventory.class);
	

	public static GInventoryProvider provide(AbstractWorld w){
		PluginsManager pm = w.getStrategy().defaultPluginsManager;
		if(w.getServer() != null){
			w.getServer().getPluginsManager();
		}
		return pm.getProviders().provideInventory();
	}
	
	
	private GInventory(){}
	
	private ArrayList<GItem> items = null;
	
	public ArrayList<GItem> getItems(){
		return items;
	}
	@Override
	public GItem getItemByID(int id){
		for(GItem item : items){
			if(item.getID() == id){
				return item;
			}
		}
		return null;
	}
	
	/**
	 * Obligé d'etre un item équipé et aussi que ca soit pas un anneau ou un dofus, 
	 * <p>si c'était un non-équipé/dofus/anneau ca renverrais nimportequel item dans linventaire
	 * @return - L'item équipé à cette position ou null si positon = POS_notEquiped ou qu'il n'y a simplement rien à cet endroit
	 */
	public GItem getItemByPosition(int position){
		if(position == CItems.POS_notEquiped){
			return null;
		}
		for(GItem item : items){
			if(item.getPosition() == position){
				return item;
			}
		}
		return null;
	}
	
	/**
	 * 
	 * @param itemSetID - L'ItemSet qu'on veut vérifier
	 * @return - Les ID des itemTemplate équipés faisant partie de la panoplie
	 */
	public short[] getItemSetEquipedItems(ItemSet is){
		short equipedItems[] = new short[is.getNumberOfItems()];
		int grade = 0;
		for(GItem i : items){
			if(i.isEquiped() && i.getTemplate().getItemSetID() == is.getID()){
				equipedItems[grade] = i.getTemplate().getID();
				grade++;
			}
		}
		if(grade == is.getNumberOfItems()){
			return equipedItems;
		}else{
			return Utils.removeTralingZeros(equipedItems, is.getNumberOfItems()-grade);
		}
	}
	
	@Override
	public void addItem(GItem i){
		items.add(i);
	}

	@Override
	public void removeItem(GItem i) {
		items.remove(i);
	}
	
	/*public void addItem(int itemID, GWorld w){
		if(w.getItem(itemID) != null){
			items.add(w.getItem(itemID));
		}else{
			Exceptions.throwNullPointerException("GInventory.addItem(int ID, world): l'itemID est inexistant dans le monde. Item = NULL. Donc on le met pas dans l'inventaire.");
		}
	}*/

	/**
	 * Sert à sauvegarder les ID des items du perso dans table perso.colonne items.
	 * Ca sert ensuite quand on load le perso pour le SELECT * WHERE 'ID' IN (IDs)
	 * @return - "ID1,ID2,ID3,ID4"  
	 */
	public String getItemsString(){
		//if(items == null){
		//	return "";
		//}
		if(items.size() == 0){
			return "";
		}
		StringBuilder str = new StringBuilder();
		for(GItem i : items){
			if(str.length() != 0){
				str.append(",");
			}
			str.append(i.getID());
		}
	//	Syn.d("Inventory.getItemsString() ="+str.toString());
		return str.toString();
	}

	/**
	 * 
	 * @return - Le nombre de pods total utilisé par tous les items dans l'inventaire. 
	 */
	public int getUsedPods() {
		int pods = 0;
		for(GItem i : items){
			pods += (i.getPods() * i.getQuantity());
		}
		return pods;
	}
	
	/**
	 * Pour savoir si les pods utilisés excedent le maximum: donc peut pas bouger et peut pas recevoir trop d'items en échanges ou autre.
	 * @param p - Le personnage à tester
	 * @return - True si (usedPods >= maxpods)
	 */
	public boolean isOverweight(GPersonnage p){
		//TODO INFOS_144 = "Votre inventaire est plein. Votre récolte est perdue...";
		//ERROR_10 = "Ton inventaire est plein, impossible d\'y ajouter d\'autres objets.";
		//INVENTORY_FULL = "Ton inventaire est plein.";
		int usedPods = getUsedPods();
		int maxpods = p.getServer().getFormulingManager().calculateMaxPods(p.getStatistique(), p);
		return (usedPods >= maxpods);
	}

	/**
	 * Delete seulement les lignes SQL de chaque items.
	 * Ne fait rien d'autre que ca. 
	 * for(GItem i : items){
	 *		SQL.Items.delete(i, p.getServer());
	 * }
	 */
	public void delete(GPersonnage p){
		//if(items != null){
			if(items.size() != 0){
				for(GItem i : items){
					SQL.Items.delete(i, p.getServer());
				}
			}
		//}
	}

	/**
	 * Terminatorise tous les items contenus dans l'inventaire et lui-même en:
	 * <p>Terminatorisant tous les items
	 * <p>Nullisant tous les items
	 * <p>Clearant l'ArrayList d'items dans l'inventaire
	 * <p>Nullisant l'ArrayList d'items dans l'inventaire
	 * <p>	//Enlevant l'inventaire de l'HashMap du GWorld (Mtn on doit le faire à part, juste apres de .terminate)
	 * <p>Finalizant();
	 */
	@Override
	public void terminate() throws Throwable {
		//if(items != null){
			if(items.size() > 0){
				for(GItem i : items){
					i.terminate();
					i = null;
				}
				items.clear();
			}
		//}
		items = null;
		this.finalize();
	}

	
	/**
	 * TODO: pogner les bonus de pods dans les effets des objets !!!
	 * But: retourner le bonus de pods TOTAL (additionné de cahque items équipé s'ils ont un bonus. style une ceinture)
	 * @return - 0 pour l'instant. À faire. Faut aussi faire l'enum des Effects pour pouvoir pogner l'effet "PODS" dans les stats de l'item
	 */
	public int getTotalBonusPods(EffectsManager em) {
		int bonus = 0;
		for(GItem i : items){
			if(i.getPosition() == CItems.POS_notEquiped || i.getEffects() == null){
				continue;
			}
			for(GEffect e : i.getEffects()){
				//Si y'a un effet en rapport aux pods
				if(em.isPodsEffect(e)){
					if(e.getEffectType(em).getOperator() == '+'){
						//Si l'effet est positif
						bonus += e.getJet().getValue(); //bonus += e.getDice().getBaseBoost();
					}else if(e.getEffectType(em).getOperator() == '-'){
						//Si l'effet est négatif
						bonus -= e.getJet().getValue(); //bonus -= e.getDice().getBaseBoost();
					}
					//Terminé avec cet item: continue au prochain item. 
					//		(Impossible d'avoir deux effets de pods sur un meme item)
					break;
				}
			}
		}
		return bonus;
	}

	
	/**
	 * TODO: GInventory.checkAllEquipedItemsConditions
	 * <p> Vérifie toutes les conditions de tous les items équipés et les déséquipe si nécéssaire.
	 * @return
	 */
	public boolean checkAllEquipedItemsConditions(GPersonnage p, GItem item, byte newposition) {
		//Vérifie si on peut équiper le nouvel item (return true/false)
		//Vérifie les items déjà équipés  (seulement si la premiere verif a fait true)
		//Syn.d("GInventory.checkAllEquipedItemsConditions Begin");
		Perfs perf = new Perfs();
		boolean toReturn = true;
		//Si on équipe	(Ce qui ne concerne/inclus PAS les références dans parseOnDelete et OnDrop) 
		if(newposition != CItems.POS_notEquiped){//Pour équiper
			if(p.getLevel() >= item.getTemplate().getLevel()){//Si bon level en équipant
				//Si le meme item d'une panoplie (Ex: deux anneau kwak feu)
				if(item.getTemplate().getItemSetID() != 0 && item.getTemplate().getType() == CItems.ITEM_TYPE_ANNEAU){
					GItem other = null;
					if(newposition == CItems.POS_anneauDroite){
						other = getItemByPosition(CItems.POS_anneauGauche);
					}else if(newposition == CItems.POS_anneauGauche){
						other = getItemByPosition(CItems.POS_anneauDroite);
					}
					if(other != null && other.getTemplate().getID() == item.getTemplate().getID()){
						toReturn = false;
					}
				}
				//Seulement si c'est toujours pas false
				if(toReturn == true){
					if(item.getTemplate().getConditions() != null){//Si y'a des conditions
						toReturn = Condition.parseConditions(item.getTemplate().getConditions(), p, item);
					}
				}
			}else{//Si mauvais lvl
				SM.Messages.M(p, "Ton niveau n'est pas suffisant pour utiliser cet objet.", Constants.COLOR_BLUE);
				toReturn = false;
			}
		}else{//Pour déséquiper
			toReturn = true;
		}	
			
			
		//À ce point, si toReturn==true, 
			//c'est que les conditions de l'item à bouger sont remplies
		if(CItems.isEquipable(item.getTemplate().getType())){
			//Vérifie tous les autres items équipés
			if(toReturn){
				boolean needToContinue = true;
				while(needToContinue){
					needToContinue = false;
					for(GItem i : p.getInventory().getItems()){
						if(i.getPosition() != CItems.POS_notEquiped){
							//Si on remplie pas les conditions : enlève l'item
							if(i.getTemplate().getConditions() != null){
								if(Condition.parseConditions(i.getTemplate().getConditions(), p, i) == false){
									this.unequipItem(i, p, i.getQuantity());
									needToContinue = true;
								}
							}
						}
					}
				}
			}
			perf.stopTiming("checkAllEquipedItemsConditions");
		}
		return toReturn;//Ca c'est juste le return
	}
	
	

	@Override
	public GItem getCanStack(GItem item, EffectsManager pm){
		for(GItem i : items){
			//S'ils ont le même template sans être le même GItem et que celui déjà dans l'inventaire  n'est pas équipé
			if(!i.isEquiped() && i.getTemplate().getID() == item.getTemplate().getID() && i.getID() != item.getID()){
				//Si les items ont les mêmes effets/stats
				if(item.hasSameEffectsAs(pm, i)){
					return i;
				}
			}
		}
		return null;
	}
	
	
	
	/**
	 * (L'item doit quand meme être déjà dans l'inventaire)
	 * <br>Fait tout ce qu'il faut pour équiper un item au complet et bien afficher les modifications:
	 * <br>Gère lrs quantités, envoie les pacquets de OQ/OM/OAKO et GM si c'est un accessoire. 
	 * <p> Fait aussi office de "moveItem".  En codant une method moveItem, j'ai remarqué que le code serait exactement pareil donc c'est cool
	 * @param movingItem
	 * @param newPos
	 * @param p
	 */
	public void equipItem(GItem movingItem, byte newPos, GPersonnage p, short qty){
		//Syn.d("equipItem.movingItem.isNeedsTwoHands == "+movingItem.getTemplate().isNeedsThoHands());//Nice l'Override marche bien : [DEBUG]: isNeedsThoHands dans WeaponItemTemplate
		//Si l'objet qu'on veut équiper est une arme à deux main et qu'il y a un bouclier d'équipé, enleve le bouclier
		if(movingItem.getTemplate().isNeedsThoHands()){
			GItem i = getItemByPosition(CItems.POS_BOUCLIER);
			if(i != null){
				unequipItem(i, p, i.getQuantity());
			}
		}
		//Si l'objet qu'on veut équiper est une bouclier et qu'on a déjà une arme à deux main, enleve l'arme
		if(movingItem.getTemplate().getType() == CItems.ITEM_TYPE_BOUCLIER){
			GItem i = getItemByPosition(CItems.POS_ARME);
			if(i != null && i.getTemplate().isNeedsThoHands()){
				unequipItem(i, p, i.getQuantity());
			}
		}
		if(newPos == ItemPosition.POS_arme.get()
				&& movingItem.isIncarnation(p.getServer().getEffectsManager())){//SpellListOptions (Dont Show if incarnation!)
			SM.Spells.SLo(p.getClient().getSession(), false);
		}
		if(movingItem.getQuantity() > qty){
			splitItem(movingItem, p, newPos, qty);
		}else if(movingItem.getQuantity() == qty){
			movingItem.setPosition(newPos);
			SM.Objects.OM(p.getClient().getSession(), movingItem);
		}
		//Boost des stats par les effets des items v
		p.getStatistique().boostEquipmentStats(movingItem, newPos, p);
		//Réaffichage du personnage (Pour si on bouge un objet accessoire: coiffe/cape/boucli/fami/arme)
		if(movingItem.isAccessory()){
			SM.Game.GM_MODIFY(p, p.getMap());
		}
	}
	
	
	/**
	 * (L'item doit quand meme être déjà dans l'inventaire)
	 * <br>Fait tout ce qu'il faut pour déséquiper un item au complet et bien afficher les modifications:
	 * <br>Gère la quantité et le stacking, envoie les pacquets de OR/OQ/OM et GM si c'est un accessoire. 
	 * <br>Évidemment, le nom dit UNequip, donc l'objet sera donc placé à la postion POS_notEquiped 
	 * @param movingItem
	 * @param p
	 */
	public void unequipItem(GItem movingItem, GPersonnage p, short qty){
		if(movingItem.getPosition() == ItemPosition.POS_arme.get()
				&& movingItem.isIncarnation(p.getServer().getEffectsManager())){//SpellListOptions (Dont Show if incarnation!)
			SM.Spells.SLo(p.getClient().getSession(), true);
		}
		GItem stacker = this.getCanStack(movingItem, p.getServer().getEffectsManager());
		//v Si on peut le stacker avec un autre objet du meme template dans l'inventaire
		if(stacker != null){
			stacker.incrementQuantity(qty);
			SM.Objects.OQ(p.getClient().getSession(), stacker);
			if(movingItem.getQuantity() > qty){//Si on bouge qu'une partie
				stacker.decrementQuantity(qty);
				SM.Objects.OQ(p.getClient().getSession(), movingItem);
			}else{//Si on bouge toute la quantité de l'item au complet
				SM.Objects.OR(p.getClient().getSession(), movingItem);
				this.removeItem(movingItem);
				SQL.Items.delete(movingItem, p.getServer());
			}
		}else{
			if(movingItem.getQuantity() != qty){//Si on bouge qu'une partie
				splitItem(movingItem, p, CItems.POS_notEquiped, qty);
			}else{
				movingItem.setPosition(CItems.POS_notEquiped);
				SM.Objects.OM(p.getClient().getSession(), movingItem);
			}
		}
		//Boost des stats par les effets des items v
		p.getStatistique().boostEquipmentStats(movingItem, CItems.POS_notEquiped, p);
		//Réaffichage du personnage (Pour si on bouge un objet accessoire: coiffe/cape/boucli/fami/arme)
		if(movingItem.isAccessory()){
			SM.Game.GM_MODIFY(p, p.getMap());
		}
	}
	
	
	private void splitItem(GItem movingItem, GPersonnage p, byte position, short qty){
		movingItem.decrementQuantity(qty);//Enleve la quantité en mouvement de l'item d'origine
		SM.Objects.OQ(p.getClient().getSession(), movingItem);//Actualise l'affichage de la quantité de l'item d'origine
		
		GItem go = GItem.copy(p.getWorld(), movingItem);//Créé un item identique à celui d'origine
		go.setQuantity(qty);//Set la quantité à celle en mouvement
		go.setPosition(position);//Set la position de la copie
		this.addItem(go);//Ajoute l'item à l'inventaire
		SQL.Items.create(go, p.getWorld());//Save l'nouveau item en bdd
		SM.Objects.OAKO(p.getClient().getSession(), p.getServer().getEffectsManager(), go);//Affiche le nouveau item
	}
	
	
	/**
	 * Sur la CandyBar en haut (ou il y a des Buffs de bonbons, transform mutant...), update cette barre et ses buffs.
	 * C-à-d: enleve un combat restant aux bonbons, enleve les buffs "Eniripsa attitude" et cie, 
	 * Donc à appeller au début d'un combat et peut-etre à la fin.
	 */
	public void updateCandyBar(){
		
	}
	
	/**
	 * Ajoute un item à la liste d'item et envoie tous les packets nécéssaires.
	 */
	public void addItemWithPackets(GPersonnage p, GItem item){
		//GItem item = GItem.createNew(p.getWorld().getNextItemID(), GlobalWorld.getItemTemplate(p.getWorld(), itemID), qty, msg.endsWith("max"));
		GItem stacker = getCanStack(item, p.getServer().getEffectsManager());
		if(stacker == null){
			addItem(item);
			SQL.Items.create(item, p.getWorld());
			SM.Objects.OAKO(p.getClient().getSession(), p.getServer().getEffectsManager(), item);
		}else{
			stacker.incrementQuantity(item.getQuantity());
			SM.Objects.OQ(p.getClient().getSession(), stacker);
		}
		SM.Objects.Ow(p.getClient().getSession(), p);
		SM.Account.As(p.getClient().getSession(), p);
	}

	@Override @Deprecated public void setID(int iD) { }
	@Override @Deprecated public int getID() { return 0; }
	@Override @Deprecated public short getServerID() { return 0; }
	@Override @Deprecated public GameServer getServer() { return null; }
	@Override @Deprecated public GWorld getWorld() { return null; }
	@Override @Deprecated public void setServer(GameServer s) { }
	public void setItems(ArrayList<GItem> items) {
		this.items = items;
	}



	
	
}
