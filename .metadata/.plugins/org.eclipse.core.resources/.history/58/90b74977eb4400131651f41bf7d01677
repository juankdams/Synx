package GameObjects;

import static Constants.Constants.prefixGDO;
import Core.Syn;
import Enums.CharacterType;
import Enums.Orientation;
import Game.DofusGameServer;
import GlobalObjects.Map;
import Interfaces.ISprite;
import Plugins.Managers.EffectsManager;
import Plugins.Managers.PluginsManager;
import Providers.GDropItemProvider;


/**
 * GDropItem = Les items jetés sur le sol à l'aide de la fonction "Jeter" dans l'inventaire.
 * @author Robyn
 */
public class GDropItem extends GItem implements ISprite{
	
	
	public static GDropItemProvider provideDropItem(DofusGameServer s){
		if(s == null){
			return Syn.Services.defaultPluginsManager.getProviders().provideDropItem();
		}
		return s.getProviders().provideDropItem();
	}

	
	
	
	
	private short cell = 0;
	private byte layer = 0;
	//private boolean isInteractive = false;

	/**
	 * Return itemTemplateID
	 */
	@Override
	public int getGfxID() {
		return this.getTemplate().getID();
	}


	/**
	 * Return cell
	 */
	@Override
	public short getCellID() {
		return cell;
	}


	/**
	 * Return packet cell;templateID;0
	 */
	@Override
	public String getSpritePacket(String prefix) {
		return "";
		/*
		if(this.isEtheree()){
			GEffect dur = EffectsManager.getDurabilityEffect(getEffects());
			return prefix+cell+";"+this.getTemplate().getID()+";1;"+dur.getDice().getWorstShot()+";"+dur.getDice().getBestShot();
		}
		//if(isInteractive){
			//TODO GDropItem.getSpritePacket (interactiveObjects) return new StringBuilder(cell+";"+this.getTemplate().getID()+";1;"+durability+";"+durabilityMax);
		//}else{
			return prefix+cell+";"+this.getTemplate().getID()+";0";//+(isInteractive?1:0));
		//}
		 */
	}

	@Override
	public String getSpritePacket(PluginsManager pm, String prefix) {
		if(prefix.indexOf(prefixGDO) == -1){
			return "";
		}
		return prefix+parseToGDOPacket(pm.getEffectsManager());
	}
	
	
	public String parseToGDOPacket(EffectsManager pm){
		GEffect dur = getEffects() == null ? null : pm.getDurabilityEffect(getEffects());
		if(dur != null && pm.containsEffectObjetEnclos(getEffects())){
			//Si y'a un effet de durabilité ca veut dire qu'il est Etheree (Voir this.isEtheree)
			//le 1 tout seul veut dire qu'il y a de la durabilité à afficher.
			//Le containsEffectObjetEnclos est pour savoir s'il a l'effet : E[948] = {d: "Objet pour enclos", c: 0, o: "/"};
			return cell+";"+this.getTemplate().getID()+";1;"+dur.getJet().getValue()+";"+(Integer.parseInt(""+dur.getSpecialArg()));
		}
		
		//if(isInteractive){
			//TODO GDropItem.parseToGDOPacket (interactiveObjects) return cell+";"+this.getTemplate().getID()+";1;"+durability+";"+durabilityMax;
		//}else{
			return cell+";"+this.getTemplate().getID()+";0";//le 0 tout seul veut dire qu'il n'y a pas de durabilité à afficher.
		//}
	}

	@Override
	public void onAddedToMap(Map m) {
		SM.Game.GDO(null, m, true, this);
	}

	@Override
	public void onRemovedFromMap(Map m) {
		SM.Game.GDO(null, m, false, this);
	}



	@Override
	public void setCellID(short cellID) {
		this.cell = cellID;
	}



	@Override
	public byte getLayer() {
		// TODO Auto-generated method stub
		return layer;
	}

	@Override
	public void setLayer(byte layer) {
		this.layer = layer;
	}


	@Override @Deprecated public Map getMap() {return null;}
	@Override @Deprecated public int getMapID() {return 0;}
	@Override @Deprecated public byte getOrientation() {return 1;}
	@Override @Deprecated public short getSize() {return 100;}
	@Override @Deprecated public CharacterType getCharacterType() {return null;}
	@Override @Deprecated public void setMap(Map m) {}
	@Override @Deprecated public void setMapID(int mapID) {}
	@Override @Deprecated public void setOrientation(Orientation o) {}
	@Override @Deprecated public void setSize(short size) {}
	@Override @Deprecated public void setGfxID(int gfxID) {}
	@Override @Deprecated public void setOrientationID(byte o) { }

	
}
