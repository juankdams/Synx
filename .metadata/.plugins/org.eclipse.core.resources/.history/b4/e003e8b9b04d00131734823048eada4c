package Plugins.Managers;

import io.netty.buffer.ByteBuf;

import java.util.HashMap;

import org.fusesource.jansi.Ansi;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import Core.Syn;
import Interfaces.IClient;
import Interfaces.IWakfuClient;
import Plugins.Abstractions.AbstractPacketParser;
import Tool.TClient;

/**
 * @author Robyn
 * 
 * Takes a Client and a packet as inputs 
 * and parses the packet with the right parser for the right type of client.
 * Clients are : GameClients (GClient), ToolClients (TClient), LoginClients (LClient).
 */
public class ParsingManager {
	public Logger log = LoggerFactory.getLogger(ParsingManager.class);

	private final Byte[] opcodesToIgnore = {};
	private HashMap<Integer, AbstractPacketParser<? extends IClient, ?>> parsers = new HashMap<Integer, AbstractPacketParser<? extends IClient, ?>>();
	
	@SuppressWarnings("unused")
	public boolean parse(IWakfuClient c, ByteBuf packet){
		Syn.w("WG [RECV1] << "+packet, Ansi.Color.GREEN);
		//ByteBuf header = packet.readSlice(5);
		int size = packet.readUnsignedShort();  // 2 bytes / 16 bits
		byte type = packet.readByte();			// 1 byte  / 8  bits
		int opcode = packet.readUnsignedShort();// 2 bytes / 16 bits
		
		AbstractPacketParser<IWakfuClient, ByteBuf> ip = cast(parsers.get(opcode));
		
		for(Byte b : opcodesToIgnore){
			if(b.equals(opcode)){
				log.info("Packet delimiter ignored by the ParsingManager :"+packet+"..");
				return true;
			}
		}
		if(ip == null){
			log.warn("WG Parser non-available for the opcode ("+opcode+")");
			return false;
		}
		return ip.parse(c, packet);
	}
	
	
	public HashMap<Integer, AbstractPacketParser<? extends IClient, ?>> getParsers(){
		return parsers;
	}
	public AbstractPacketParser<? extends IClient, ?> getParser(int a){
		return parsers.get(a);
	}
	public ParsingManager setParser(int a, AbstractPacketParser<? extends IClient, ?> iparser){
		parsers.put(a, iparser);
		return this;
	}
	public void unload() {
		parsers.clear();
		parsers = new HashMap<Integer, AbstractPacketParser<? extends IClient, ?>>();
	}
	
	
	/**
	* Warning! Using this method is a sin against the gods of programming!
	*/
	@SuppressWarnings("unchecked")
	private static <T> T cast(Object o){
		return (T)o;
	}
	
}
