package com.sun.script.fantom;

import java.io.InputStream;
import java.io.Reader;

import javax.script.AbstractScriptEngine;
import javax.script.Bindings;
import javax.script.ScriptContext;
import javax.script.ScriptEngineFactory;
import javax.script.ScriptException;

public class FantomScriptEngine extends AbstractScriptEngine {
	
	private String executable = "G:/Rob/Program Files/fantom-1.0.65/bin/fan.exe";
	
	public void run(String script){
		if(script.endsWith(".fan") == false){
			script += ".fan";
		}
		exec(executable+" "+script);
	}
	

	//passage par argument de la commande à lancer 
	private void exec(String command) { 
		try { 
			//creation du processus 
			Process p = Runtime.getRuntime().exec(command); 
			getRealtimeStream(p);
			System.out.println("Exit value : "+p.exitValue());
		} catch (Exception e) { 
			System.out.println("\n" + command + ": commande inconnu "); 
		} 
	} 
	
	private void getRealtimeStream(Process p){
		try { 
			InputStream in = p.getInputStream(); 
			
			//on récupère le flux de sortie du programme 
		
			StringBuilder build = new StringBuilder(); 
			char c = (char) in.read(); 
		
			while (c != (char) -1) { 
				build.append(c); 
				c = (char) in.read(); 
				if(c == '\n'){
					System.out.println("line : "+build.toString());
					build.delete(0, build.length());
					c = (char) in.read(); 
				}
			} 
		} catch (Exception e) { 
			e.printStackTrace();
		} 
	}
	
	private StringBuilder getStream(Process p){
		try { 
			InputStream in = p.getInputStream(); 
			
			//on récupère le flux de sortie du programme 
		
			StringBuilder build = new StringBuilder(); 
			char c = (char) in.read(); 
		
			while (c != (char) -1) { 
				build.append(c); 
				c = (char) in.read(); 
			} 
			return build;
		} catch (Exception e) { 
			e.printStackTrace();
		} 
		return null;
	}

	
	

	@Override
	public Bindings createBindings() {
		// TODO Auto-generated method stub
		return null;
	}


	@Override
	public Object eval(String arg0, ScriptContext arg1) throws ScriptException {
		// TODO Auto-generated method stub
		return null;
	}


	@Override
	public Object eval(Reader arg0, ScriptContext arg1) throws ScriptException {
		// TODO Auto-generated method stub
		return null;
	}


	@Override
	public ScriptEngineFactory getFactory() {
		// TODO Auto-generated method stub
		return null;
	}
	
	
	

}
