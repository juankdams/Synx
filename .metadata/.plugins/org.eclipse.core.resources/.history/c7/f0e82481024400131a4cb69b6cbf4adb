package Plugins.Managers;

import plugin.Plugins;
import Core.Syn;
import Interfaces.IService;

public abstract class PluginsManager implements IService {

	public Plugins plugins = null;
	
	private ProvidersManager p = null;
	private ActionsManager am;
	private AspectJManager ajm;
	private EffectsManager em;
	private FormulingManager fm;
	private MacroManager mm;
	private ParsingManager pm;
	private SystemsManager sm;
	
	
	@Override
	public void boot() throws Exception {
		plugins = new Plugins();
		//p = new ProvidersManager();
		//p.boot();
		instance();
		loadPlugins();
	}
	@Override
	public void reboot() throws Exception {
		boot();
	}
	
	public abstract void loadPlugins();//call SQL.SConfig.loadPlugins();
	
	private void instance(){
		p = new ProvidersManager();
		am = new ActionsManager();
		ajm = new AspectJManager();
		em = new EffectsManager();
		fm = new FormulingManager();
		mm = new MacroManager();
		pm = new ParsingManager();
		sm = new SystemsManager();
	}
	

	public ActionsManager getActionsManager(){
		return (am != null && am.getAapl() != null) ? am : Syn.Services.defaultPluginsManager.am;
	}
	public AspectJManager getAspectJManager(){
		return (ajm != null && ajm.getAapl() != null) ? ajm : Syn.Services.defaultPluginsManager.ajm;
	}
	public EffectsManager getEffectsManager(){
		return (em != null && em.getEpli() != null) ? em : Syn.Services.defaultPluginsManager.em;
	}
	public FormulingManager getFormulingManager(){
		return (fm != null && fm.getFormulas() != null) ? fm : Syn.Services.defaultPluginsManager.fm;
	}
	public MacroManager getMacroManager(){
		return (mm != null && mm.am != null) ? mm : Syn.Services.defaultPluginsManager.mm;
	}
	public ParsingManager getParsingManager(){
		return (pm != null && !pm.getParsers().isEmpty()) ? pm : Syn.Services.defaultPluginsManager.pm;
	}
	public SystemsManager getSystemsManager(){
		return (sm != null && sm.systems != null) ? sm : Syn.Services.defaultPluginsManager.sm;
	}
	public ProvidersManager getProviders(){
		return (p != null) ? p : Syn.Services.defaultPluginsManager.p;
	}
	

}
