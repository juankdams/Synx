package WakfuPackets;

import java.util.HashMap;
import java.util.Map;

import com.velocity.jwakfu.crypto.RSACertificateManager;

import io.netty.buffer.ByteBuf;
import io.netty.buffer.Unpooled;

enum OutPacketsEnum {
	
	
	
	RsaKey(1032),
	
	;
	
	private int id = 0;
	private OutPacketsEnum(int id){
		this.id = id;
	}
	public int get(){
		return id;
	}
	

	private static Map<OutPacketsEnum, ByteBuf> packets = new HashMap<OutPacketsEnum, ByteBuf>();
	

	private static final long RSA_VERIFICATION_LONG = 0x8000000000000000L;
	private static void prepare1032() {
		packets.get(1032).writeLong(RSA_VERIFICATION_LONG);
		packets.get(1032).writeBytes(RSACertificateManager.INSTANCE.getPublicKey());
	}

	static {
		for(OutPacketsEnum o : OutPacketsEnum.values()){
			packets.put(o, Unpooled.buffer());
			packets.get(o).writeShort(0); //Size placeholder
			packets.get(o).writeShort(o.get());
		}
		prepare1032();
	}
	
	
}
