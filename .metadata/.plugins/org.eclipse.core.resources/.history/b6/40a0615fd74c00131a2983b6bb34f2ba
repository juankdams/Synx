package pack;

import plugin.event.Event;
import Core.Syn;
import Plugins.Abstractions.AbstractAspectJ;
import Plugins.Managers.PluginsManager;
import ZPlug.MiscEvent;
import ZPlug.Vars;

public class AspectsMain extends AbstractAspectJ {

	public Vars v = new Vars();
	public PluginsManager pm = null;
	//public MacroRecorder baseRecorder = new MacroRecorder();
	
	@Override
	public void onLoad() {
		Syn.wD("   AspectJPlugin onLoad ");
		//baseRecorder = new MacroRecorder();
		setGreatVars();
		registerEvents();
	}
	
	@Override
	public void onEnable() {
		Syn.wD("   AspectJPlugin onEnable ");
		this.initiateActionListenersAlias();
		pm.getAdapter().getAspectJManager().setAapl(this);
		//MacroManager.aspectMacroRecorder = baseRecorder;
	}

	@Override
	public void onDisable() {
		Syn.wD("   AspectJPlugin onDisable");
	}

	@Override
	public void unload() {
		pm.getAspectJManager().unload();
		v = null;
	}
	
	@Override
	public void registerEvents() {
		this.getPluginManager().registerEvent(MiscEvent.Load_Plugins_ActionListenersAlias, v.listener);
		this.getPluginManager().registerEvent(MiscEvent.Set_PluginsManager, v.listener);
	}

	@Override
	public void unRegisterEvents() {
		this.getPluginManager().registerEvent(MiscEvent.Load_Plugins_ActionListenersAlias, v.listener);
		this.getPluginManager().registerEvent(MiscEvent.Set_PluginsManager, v.listener);
	}
	
	private void setGreatVars() {
		v.unrecognizedCommand = this.getInformation().getName()+v.unrecognizedCommand+this.getInformation().getName()+"Plugin";
		v.unrecognizedEvent = this.getInformation().getName()+v.unrecognizedEvent+this.getInformation().getName()+"Plugin";
		v.pluginEnabled = this.getInformation().getName()+v.pluginEnabled;
		v.pluginDisabled = this.getInformation().getName()+v.pluginDisabled;
		v.listener = this;
	}
	


	@Override
	public Event execute(Event event) {
		if(event.getEventType() == MiscEvent.Load_Plugins_ActionListenersAlias){
			this.initiateActionListenersAlias();	
		}else{
			Syn.log.error("ActionsPlugin.Application.execute ne devrait jamais être appelé sauf pour initier les ActionsListenersAlias");
		}
		if(event.getEventType() == MiscEvent.Set_PluginsManager){
			pm = (PluginsManager) event.getSource();
		}
		return null;
	}

	public void initiateActionListenersAlias(){
		//Exemples v
		//ActionsManager.putActionListenerAlias("OM", "ON_ITEM_MOVEMENT");
		//ActionsManager.putActionListenerAlias("OD", "ON_ITEM_DROP");
		//ActionsManager.putActionListenerAlias("Od", "ON_ITEM_DELETE");
		//ActionsManager.putActionListenerAlias("OU", "ON_ITEM_USE");//no Confirmation required.
		//ActionsManager.putActionListenerAlias("Ou", "ON_ITEM_USE");//askConfirmation
		//ActionsManager.putActionListenerAlias("Ox", "ON_ITEM_DISSOCIATE");
		//ActionsManager.putActionListenerAlias("Os", "ON_ITEM_SETSKIN");
		//ActionsManager.putActionListenerAlias("Of", "ON_ITEM_FEED");
	}
	

	
	
	
}
