package GlobalObjects;

import java.util.ArrayList;

import Core.Exceptions;
import GameObjects.GEffect;
import Misc.Utils;

public class ItemSet {

	private short ID = 0;
	private short itemTemplateIDs[] = null;
	private ArrayList<GEffect> bonuses[] = null;
	
	
	
	public ItemSet(short ID, String items, String bonusStr){
		this.ID = ID;
		
		//Les ID des ItemTemplates qui font parti de l'ItemSet
		String itemps[] = items.split(",");
		this.itemTemplateIDs = new short[itemps.length];
		for(int i = itemps.length; i-- > 0;){
			if(Utils.isParsableInteger(itemps[i].trim())){
				itemTemplateIDs[i] = Short.parseShort(itemps[i].trim());
			}else{
				Exceptions.throwNumberFormatException("Impossible de parser l'id d'item -"+itemps[i]+"- dans le constructeur de l'ItemSet ID "+ID);
			}
		}
		
		//Les bonus de l'ItemSet à chaque grade (nbr d'item de la pano équipé)
		String grades[] = bonusStr.split(";");
		this.bonuses = new ArrayList[grades.length];
		
		for(int i = grades.length; i-- > 0;){
			this.bonuses[i] = new ArrayList<GEffect>();
			
			String bonuss[] = grades[i].split(",");//Chaque bonus qu'il y a pour ce grade
			for(int b = bonuss.length; b-- > 0;){
				if(Utils.isParsableInteger(bonuss[b].substring(0, bonuss[b].indexOf(":")))
						&& Utils.isParsableInteger(bonuss[b].substring(1+bonuss[b].indexOf(":")))){
						this.bonuses[i].add(EffectsShare.addOrModifyEffect(
								GEffect.provide(s).createNewForItemSet()
								new GEffect(
								Short.parseShort(bonuss[b].substring(0, bonuss[b].indexOf(":"))),
								Short.parseShort(bonuss[b].substring(1+bonuss[b].indexOf(":")))
						)	)
									
						);
				}else{
					Exceptions.throwNumberFormatException("Impossible de parser l'un des effets: -"+bonuss[b]+"- dans le constructeur de l'ItemSet ID "+ID);
				}
			}
			
		}
	}

	
	
	public void setID(short iD) {
		ID = iD;
	}
	public short getID() {
		return ID;
	}
	
	/**
	 * Renvoie le nombre d'items qu'il y a au total dans cet ItemSet.
	 */
	public int getNumberOfItems(){
		return itemTemplateIDs.length;
	}
	/**
	 * @param grade - Nombre d'items équipés faisant parti de cet itemSet
	 * @return - Les bonus liés à ce nombre d'item
	 */
	public ArrayList<GEffect> getBonuses(int grade){
		grade -= 2;//Parce que cest à partir de 2 
		if(grade < 0 || grade >= bonuses.length){
			return null;
		}
		return bonuses[grade];
	}
	public  ArrayList<GEffect>[] getAllBonuses(){
		return bonuses;
	}

	public void setItemTemplateIDs(short itemTemplates[]) {
		this.itemTemplateIDs = itemTemplates;
	}

	public short[] getItemTemplateIDs() {
		return itemTemplateIDs;
	}

	public boolean containsItemTemplateID(short itemTemplateID){
		for(short id : itemTemplateIDs){
			if(id == itemTemplateID){
				return true;
			}
		}
		return false;
	}
	
}
