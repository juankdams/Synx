package SM;

import java.util.HashMap;
import java.util.Map;

import io.netty.buffer.ByteBuf;
import io.netty.buffer.Unpooled;

import com.velocity.jwakfu.crypto.RSACertificateManager;
import com.velocity.jwakfu.io.OutPacket;

public class Approach {
	
	
	private static final int PACKET_ID = 1032;
	public static final long RSA_VERIFICATION_LONG = 0x8000000000000000L;
	
	public static Map<Integer, ByteBuf> packets = new HashMap<Integer, ByteBuf>();
	
	static {
		for(int i = 1030; i > 0; i--){
			packets.put(i, Unpooled.buffer());
			packets.get(i).writeShort(0); //Size placeholder
			packets.get(i).writeShort(i);
		}
		
		
		{
			p1030.writeShort(0); //Size placeholder
			p1030.writeShort(1030);
			p1030.writeLong(RSA_VERIFICATION_LONG);
			p1030.writeBytes(RSACertificateManager.INSTANCE.getPublicKey());
		}
	}
	
	public static void encode() {
		OutPacket buffer = new OutPacket(PACKET_ID);
		
		buffer.writeLong(RSA_VERIFICATION_LONG);
		buffer.writeBytes(RSACertificateManager.INSTANCE.getPublicKey());
		
		return buffer;
	}
	
	
}
