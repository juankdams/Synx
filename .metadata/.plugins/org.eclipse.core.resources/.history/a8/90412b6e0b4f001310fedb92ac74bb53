package Management;

import Abstractions.AbstractSqlService;
import GameClientStrategies.DofusClientStrategy;
import GameClientStrategies.GameClientStrategies;
import GameClientStrategies.WakfuClientStrategy;
import Interfaces.IService;
import Misc.ConsoleScanner;
import Misc.Tests.Perfs;
import NewThreads.ThreadsManager;
import SQL.SqlServiceMySql;
import XML.Config;

public class Services implements IService {

	
	public AbstractSqlService sqlSynService;//Management
	public AbstractSqlService sqlZenService;//Donn√©es de Zen
	public ThreadsManager globalThreadsManagerService;
	public ConsoleScanner consoleService;
	public Servers serversService;
	public Users users;
	public Config configService;

	public WakfuClientStrategy wakfuClientStrategy;
	public DofusClientStrategy dofusClientStrategy;
	
	@Override
	public void boot() throws Exception{
		bootThreadManagingService();
		bootConsoleService();
		
		bootConfigService();
		bootSqlService();

		bootGameClientStrategies();
		//boot scripts + pluginsmanager
		
		bootUsersService();
		
		bootServersService();

	}
	

	private void bootGameClientStrategies() throws Exception {
		wakfuClientStrategy = (WakfuClientStrategy) GameClientStrategies.WakfuClientStrategy.get();
		dofusClientStrategy = (DofusClientStrategy) GameClientStrategies.DofusClientStrategy.get();
		wakfuClientStrategy.boot();
		dofusClientStrategy.boot();
	}


	@Override
	public void reboot() throws Exception {
		globalThreadsManagerService.reboot();
		consoleService.reboot();

		configService.reboot();
		
		sqlSynService.reboot();
		//sqlGlobalService.reboot();
		sqlZenService.reboot();
		
		wakfuClientStrategy.reboot();
		dofusClientStrategy.reboot();
		
		serversService.reboot();

	}
	
	
	private void bootConfigService() throws Exception {
		configService = new Config();
		configService.boot();
	}
	
	private void bootSqlService() throws Exception {
		Perfs p = new Perfs();
		sqlSynService = new SqlServiceMySql(){
			@Override
			public void boot() throws Exception{
				c = createConnection(
						Config.synDBIP,
						Config.synDBName,
						Config.synDBUser,
						Config.synDBPass
						);
				//this.TIMER(false);
				c.setAutoCommit(true);
			}
		};
		sqlSynService.boot();
		p.stopTiming("Booted Syn SQL");
		p.restartTiming();
		
		/*sqlGlobalService = new SqlServiceMySql(){
			@Override
			public void boot() throws Exception{
				c = createConnection(
						Config.globalDBIP,
						Config.globalDBName,
						Config.globalDBUser,
						Config.globalDBPass
						);
				//this.TIMER(false);
				c.setAutoCommit(true);
			}
		};
		sqlGlobalService.boot();
		p.stopTiming("Booted Global SQL");
		p.restartTiming();*/

		sqlZenService = new SqlServiceMySql(){
			@Override
			public void boot() throws Exception{
				c = createConnection(
						Config.zenDBIP,
						Config.zenDBName,
						Config.zenDBUser,
						Config.zenDBPass
						);
				//this.TIMER(false);
				c.setAutoCommit(true);
			}
		};
		sqlZenService.boot();
		p.stopTiming("Booted Zen SQL");
		p.restartTiming();
	}
	
	private void bootThreadManagingService() throws Exception {
		globalThreadsManagerService = new ThreadsManager();
		globalThreadsManagerService.boot();
	}
	
	private void bootConsoleService() throws Exception {
		consoleService = new ConsoleScanner();
		consoleService.boot();
	}
	
	private void bootServersService() throws Exception {
		serversService = new Servers();
		serversService.boot();
	}
	private void bootUsersService() throws Exception {
		users = new Users();
		users.boot();
	}


	public Object getThreadsManager() {
		return globalThreadsManagerService;
	}
	
	
}
