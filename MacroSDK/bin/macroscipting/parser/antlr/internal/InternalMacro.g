/*
* generated by Xtext
*/
grammar InternalMacro;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package macroscipting.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package macroscipting.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import macroscipting.services.MacroGrammarAccess;

}

@parser::members {

 	private MacroGrammarAccess grammarAccess;
 	
    public InternalMacroParser(TokenStream input, MacroGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Domain";	
   	}
   	
   	@Override
   	protected MacroGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleDomain
entryRuleDomain returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDomainRule()); }
	 iv_ruleDomain=ruleDomain 
	 { $current=$iv_ruleDomain.current; } 
	 EOF 
;

// Rule Domain
ruleDomain returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getDomainAccess().getElementsOnLoadBlocParserRuleCall_0_0()); 
	    }
		lv_elements_0_0=ruleonLoadBloc		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDomainRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_0_0, 
        		"onLoadBloc");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDomainAccess().getElementsBlocParserRuleCall_1_0()); 
	    }
		lv_elements_1_0=ruleBloc		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDomainRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_1_0, 
        		"Bloc");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getDomainAccess().getElementsClassParserRuleCall_2_0()); 
	    }
		lv_elements_2_0=ruleClass		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDomainRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_2_0, 
        		"Class");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleClass
entryRuleClass returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassRule()); }
	 iv_ruleClass=ruleClass 
	 { $current=$iv_ruleClass.current; } 
	 EOF 
;

// Rule Class
ruleClass returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='class' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getClassAccess().getClassKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getClassAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getClassRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(	otherlv_2='extends' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getClassAccess().getExtendsKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClassAccess().getSuperTypeClassParserRuleCall_2_1_0()); 
	    }
		lv_superType_3_0=ruleClass		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassRule());
	        }
       		set(
       			$current, 
       			"superType",
        		lv_superType_3_0, 
        		"Class");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getClassAccess().getLeftCurlyBracketKeyword_3());
    }
	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getClassAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleonLoadBloc
entryRuleonLoadBloc returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOnLoadBlocRule()); }
	 iv_ruleonLoadBloc=ruleonLoadBloc 
	 { $current=$iv_ruleonLoadBloc.current; } 
	 EOF 
;

// Rule onLoadBloc
ruleonLoadBloc returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='onLoad' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getOnLoadBlocAccess().getOnLoadKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getOnLoadBlocAccess().getLeftCurlyBracketKeyword_1());
    }
	otherlv_2='filePath' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getOnLoadBlocAccess().getFilePathKeyword_2());
    }
	otherlv_3='=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getOnLoadBlocAccess().getEqualsSignKeyword_3());
    }
(
(
		lv_filePath_4_0=RULE_STRING
		{
			newLeafNode(lv_filePath_4_0, grammarAccess.getOnLoadBlocAccess().getFilePathSTRINGTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOnLoadBlocRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"filePath",
        		lv_filePath_4_0, 
        		"STRING");
	    }

)
)	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getOnLoadBlocAccess().getSemicolonKeyword_5());
    }
	otherlv_6='fileName' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getOnLoadBlocAccess().getFileNameKeyword_6());
    }
	otherlv_7='=' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getOnLoadBlocAccess().getEqualsSignKeyword_7());
    }
(
(
		lv_fileName_8_0=RULE_STRING
		{
			newLeafNode(lv_fileName_8_0, grammarAccess.getOnLoadBlocAccess().getFileNameSTRINGTerminalRuleCall_8_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOnLoadBlocRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"fileName",
        		lv_fileName_8_0, 
        		"STRING");
	    }

)
)	otherlv_9=';' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getOnLoadBlocAccess().getSemicolonKeyword_9());
    }
	otherlv_10='characterID' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getOnLoadBlocAccess().getCharacterIDKeyword_10());
    }
	otherlv_11='=' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getOnLoadBlocAccess().getEqualsSignKeyword_11());
    }
(
(
		lv_characterID_12_0=RULE_INT
		{
			newLeafNode(lv_characterID_12_0, grammarAccess.getOnLoadBlocAccess().getCharacterIDINTTerminalRuleCall_12_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOnLoadBlocRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"characterID",
        		lv_characterID_12_0, 
        		"INT");
	    }

)
)	otherlv_13=';' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getOnLoadBlocAccess().getSemicolonKeyword_13());
    }
	otherlv_14='scope' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getOnLoadBlocAccess().getScopeKeyword_14());
    }
	otherlv_15='=' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getOnLoadBlocAccess().getEqualsSignKeyword_15());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOnLoadBlocAccess().getScopeScopeTypeParserRuleCall_16_0()); 
	    }
		lv_scope_16_0=ruleScopeType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOnLoadBlocRule());
	        }
       		set(
       			$current, 
       			"scope",
        		lv_scope_16_0, 
        		"ScopeType");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_17=';' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getOnLoadBlocAccess().getSemicolonKeyword_17());
    }
	otherlv_18='compatMicro' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getOnLoadBlocAccess().getCompatMicroKeyword_18());
    }
	otherlv_19='=' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getOnLoadBlocAccess().getEqualsSignKeyword_19());
    }
((
(
		lv_compactMicro_20_0=	'true' 
    {
        newLeafNode(lv_compactMicro_20_0, grammarAccess.getOnLoadBlocAccess().getCompactMicroTrueKeyword_20_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOnLoadBlocRule());
	        }
       		setWithLastConsumed($current, "compactMicro", lv_compactMicro_20_0, "true");
	    }

)
)
    |	otherlv_21='false' 
    {
    	newLeafNode(otherlv_21, grammarAccess.getOnLoadBlocAccess().getFalseKeyword_20_1());
    }
)	otherlv_22=';' 
    {
    	newLeafNode(otherlv_22, grammarAccess.getOnLoadBlocAccess().getSemicolonKeyword_21());
    }
	otherlv_23='}' 
    {
    	newLeafNode(otherlv_23, grammarAccess.getOnLoadBlocAccess().getRightCurlyBracketKeyword_22());
    }
)
;





// Entry rule entryRuleBloc
entryRuleBloc returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBlocRule()); }
	 iv_ruleBloc=ruleBloc 
	 { $current=$iv_ruleBloc.current; } 
	 EOF 
;

// Rule Bloc
ruleBloc returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='bloc #' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getBlocAccess().getBlocKeyword_0());
    }
(
(
		lv_name_1_0=RULE_INT
		{
			newLeafNode(lv_name_1_0, grammarAccess.getBlocAccess().getNameINTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBlocRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"INT");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBlocAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBlocAccess().getDirectivesDirectiveParserRuleCall_3_0()); 
	    }
		lv_directives_3_0=ruleDirective		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBlocRule());
	        }
       		add(
       			$current, 
       			"directives",
        		lv_directives_3_0, 
        		"Directive");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getBlocAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleDirective
entryRuleDirective returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDirectiveRule()); }
	 iv_ruleDirective=ruleDirective 
	 { $current=$iv_ruleDirective.current; } 
	 EOF 
;

// Rule Directive
ruleDirective returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='dir' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDirectiveAccess().getDirKeyword_0());
    }
(
    { 
        newCompositeNode(grammarAccess.getDirectiveAccess().getIntDirectiveParserRuleCall_1_0()); 
    }
    this_intDirective_1=ruleintDirective
    { 
        $current = $this_intDirective_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDirectiveAccess().getStrDirectiveParserRuleCall_1_1()); 
    }
    this_strDirective_2=rulestrDirective
    { 
        $current = $this_strDirective_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDirectiveAccess().getVarDirectiveParserRuleCall_1_2()); 
    }
    this_varDirective_3=rulevarDirective
    { 
        $current = $this_varDirective_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDirectiveAccess().getConditionnalDirectiveParserRuleCall_1_3()); 
    }
    this_conditionnalDirective_4=ruleconditionnalDirective
    { 
        $current = $this_conditionnalDirective_4.current; 
        afterParserOrEnumRuleCall();
    }
)	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getDirectiveAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleconditionnalDirective
entryRuleconditionnalDirective returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditionnalDirectiveRule()); }
	 iv_ruleconditionnalDirective=ruleconditionnalDirective 
	 { $current=$iv_ruleconditionnalDirective.current; } 
	 EOF 
;

// Rule conditionnalDirective
ruleconditionnalDirective returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getConditionnalDirectiveAccess().getIfDirectiveParserRuleCall_0()); 
    }
    this_ifDirective_0=ruleifDirective
    { 
        $current = $this_ifDirective_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getConditionnalDirectiveAccess().getWaitDirectiveParserRuleCall_1()); 
    }
    this_waitDirective_1=rulewaitDirective
    { 
        $current = $this_waitDirective_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getConditionnalDirectiveAccess().getLockDirectiveParserRuleCall_2()); 
    }
    this_lockDirective_2=rulelockDirective
    { 
        $current = $this_lockDirective_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulestrDirective
entryRulestrDirective returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStrDirectiveRule()); }
	 iv_rulestrDirective=rulestrDirective 
	 { $current=$iv_rulestrDirective.current; } 
	 EOF 
;

// Rule strDirective
rulestrDirective returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getStrDirectiveAccess().getNameStringDirectiveParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleStringDirective		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStrDirectiveRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"StringDirective");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStrDirectiveAccess().getColonKeyword_1());
    }
(
(
		lv_value_2_0=RULE_STRING
		{
			newLeafNode(lv_value_2_0, grammarAccess.getStrDirectiveAccess().getValueSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStrDirectiveRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleintDirective
entryRuleintDirective returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntDirectiveRule()); }
	 iv_ruleintDirective=ruleintDirective 
	 { $current=$iv_ruleintDirective.current; } 
	 EOF 
;

// Rule intDirective
ruleintDirective returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getIntDirectiveAccess().getNameIntegerDirectiveParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleIntegerDirective		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIntDirectiveRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"IntegerDirective");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIntDirectiveAccess().getColonKeyword_1());
    }
(
(
		lv_value_2_0=RULE_INT
		{
			newLeafNode(lv_value_2_0, grammarAccess.getIntDirectiveAccess().getValueINTTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntDirectiveRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"INT");
	    }

)
))
;





// Entry rule entryRulevarDirective
entryRulevarDirective returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVarDirectiveRule()); }
	 iv_rulevarDirective=rulevarDirective 
	 { $current=$iv_rulevarDirective.current; } 
	 EOF 
;

// Rule varDirective
rulevarDirective returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=	'VAR' 
    {
        newLeafNode(lv_name_0_0, grammarAccess.getVarDirectiveAccess().getNameVARKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVarDirectiveRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_0, "VAR");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getVarDirectiveAccess().getColonKeyword_1());
    }
(
(
		lv_left_2_0=RULE_ID
		{
			newLeafNode(lv_left_2_0, grammarAccess.getVarDirectiveAccess().getLeftIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVarDirectiveRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"left",
        		lv_left_2_0, 
        		"ID");
	    }

)
)	otherlv_3='=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getVarDirectiveAccess().getEqualsSignKeyword_3());
    }
(
(
		lv_right_4_0=RULE_ID
		{
			newLeafNode(lv_right_4_0, grammarAccess.getVarDirectiveAccess().getRightIDTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVarDirectiveRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"right",
        		lv_right_4_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleifDirective
entryRuleifDirective returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIfDirectiveRule()); }
	 iv_ruleifDirective=ruleifDirective 
	 { $current=$iv_ruleifDirective.current; } 
	 EOF 
;

// Rule ifDirective
ruleifDirective returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=	'IF' 
    {
        newLeafNode(lv_name_0_0, grammarAccess.getIfDirectiveAccess().getNameIFKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIfDirectiveRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_0, "IF");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIfDirectiveAccess().getLeftParenthesisKeyword_1());
    }
(
(
		lv_left_2_0=RULE_ID
		{
			newLeafNode(lv_left_2_0, grammarAccess.getIfDirectiveAccess().getLeftIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIfDirectiveRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"left",
        		lv_left_2_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getIfDirectiveAccess().getOperatorOperatorParserRuleCall_3_0()); 
	    }
		lv_operator_3_0=ruleoperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfDirectiveRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_3_0, 
        		"operator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_right_4_0=RULE_ID
		{
			newLeafNode(lv_right_4_0, grammarAccess.getIfDirectiveAccess().getRightIDTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIfDirectiveRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"right",
        		lv_right_4_0, 
        		"ID");
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getIfDirectiveAccess().getRightParenthesisKeyword_5());
    }
(	otherlv_6='{' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getIfDirectiveAccess().getLeftCurlyBracketKeyword_6());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getIfDirectiveAccess().getDirectivesDirectiveParserRuleCall_7_0()); 
	    }
		lv_directives_7_0=ruleDirective		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfDirectiveRule());
	        }
       		add(
       			$current, 
       			"directives",
        		lv_directives_7_0, 
        		"Directive");
	        afterParserOrEnumRuleCall();
	    }

)
)*(	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getIfDirectiveAccess().getRightCurlyBracketKeyword_8());
    }
)?)
;





// Entry rule entryRulewaitDirective
entryRulewaitDirective returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWaitDirectiveRule()); }
	 iv_rulewaitDirective=rulewaitDirective 
	 { $current=$iv_rulewaitDirective.current; } 
	 EOF 
;

// Rule waitDirective
rulewaitDirective returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=	'WAIT' 
    {
        newLeafNode(lv_name_0_0, grammarAccess.getWaitDirectiveAccess().getNameWAITKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getWaitDirectiveRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_0, "WAIT");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getWaitDirectiveAccess().getLeftParenthesisKeyword_1());
    }
(
(
		lv_time_2_0=RULE_INT
		{
			newLeafNode(lv_time_2_0, grammarAccess.getWaitDirectiveAccess().getTimeINTTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getWaitDirectiveRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"time",
        		lv_time_2_0, 
        		"INT");
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getWaitDirectiveAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRulelockDirective
entryRulelockDirective returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLockDirectiveRule()); }
	 iv_rulelockDirective=rulelockDirective 
	 { $current=$iv_rulelockDirective.current; } 
	 EOF 
;

// Rule lockDirective
rulelockDirective returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=	'LOCK' 
    {
        newLeafNode(lv_name_0_0, grammarAccess.getLockDirectiveAccess().getNameLOCKKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLockDirectiveRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_0, "LOCK");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLockDirectiveAccess().getLeftParenthesisKeyword_1());
    }
(
(
		lv_variable_2_0=RULE_ID
		{
			newLeafNode(lv_variable_2_0, grammarAccess.getLockDirectiveAccess().getVariableIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLockDirectiveRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"variable",
        		lv_variable_2_0, 
        		"ID");
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getLockDirectiveAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleoperator
entryRuleoperator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperatorRule()); } 
	 iv_ruleoperator=ruleoperator 
	 { $current=$iv_ruleoperator.current.getText(); }  
	 EOF 
;

// Rule operator
ruleoperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='==' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperatorAccess().getEqualsSignEqualsSignKeyword_0()); 
    }

    |
	kw='!=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperatorAccess().getExclamationMarkEqualsSignKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleIntegerDirective
entryRuleIntegerDirective returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntegerDirectiveRule()); } 
	 iv_ruleIntegerDirective=ruleIntegerDirective 
	 { $current=$iv_ruleIntegerDirective.current.getText(); }  
	 EOF 
;

// Rule IntegerDirective
ruleIntegerDirective returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='EMOTE' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIntegerDirectiveAccess().getEMOTEKeyword_0()); 
    }

    |
	kw='DIRECTION' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIntegerDirectiveAccess().getDIRECTIONKeyword_1()); 
    }

    |
	kw='MOVEMENT' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIntegerDirectiveAccess().getMOVEMENTKeyword_2()); 
    }

    |
	kw='GOTO' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIntegerDirectiveAccess().getGOTOKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleStringDirective
entryRuleStringDirective returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringDirectiveRule()); } 
	 iv_ruleStringDirective=ruleStringDirective 
	 { $current=$iv_ruleStringDirective.current.getText(); }  
	 EOF 
;

// Rule StringDirective
ruleStringDirective returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='CHAT' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStringDirectiveAccess().getCHATKeyword_0()); 
    }

    |
	kw='EFFET' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStringDirectiveAccess().getEFFETKeyword_1()); 
    }

    |
	kw='VAR' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStringDirectiveAccess().getVARKeyword_2()); 
    }

    |
	kw='IF' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStringDirectiveAccess().getIFKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleScopeType
entryRuleScopeType returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getScopeTypeRule()); } 
	 iv_ruleScopeType=ruleScopeType 
	 { $current=$iv_ruleScopeType.current.getText(); }  
	 EOF 
;

// Rule ScopeType
ruleScopeType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='TO_MAP' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getScopeTypeAccess().getTO_MAPKeyword_0()); 
    }

    |
	kw='TO_TARGET' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getScopeTypeAccess().getTO_TARGETKeyword_1()); 
    }

    |
	kw='TO_SUBZONE' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getScopeTypeAccess().getTO_SUBZONEKeyword_2()); 
    }

    |
	kw='TO_ZONE' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getScopeTypeAccess().getTO_ZONEKeyword_3()); 
    }

    |
	kw='TO_SUPERZONE' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getScopeTypeAccess().getTO_SUPERZONEKeyword_4()); 
    }

    |
	kw='TO_ALL' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getScopeTypeAccess().getTO_ALLKeyword_5()); 
    }
)
    ;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


