/*
 * generated by Xtext
 */
package macroscipting.validation

import org.eclipse.xtext.validation.Check
import macroscipting.macro.Bloc
import macroscipting.macro.Domain
import macroscipting.macro.MacroPackage
import org.eclipse.emf.ecore.EObject
import macroscipting.macro.intDirective
import macroscipting.macro.onLoadBloc

//import org.eclipse.xtext.validation.Check

/**
 * Custom validation rules. 
 *
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
class MacroValidator extends AbstractMacroValidator {

  public static val INVALID_NAME = 'invalidName'
  public static val INVALID_ELEMENT = 'invalidElement'
  public static val INVALID_ARGUMENT = 'invalidArgument'
  
  
  
	@Check
	def checkBlocIDUnique(Bloc bloc) {
		for(EObject o : bloc.eContainer().eContents()){
			if(o instanceof Bloc){
				val b = o as Bloc;
				if(b != bloc){
					if(b.getName() == bloc.getName()){
						error('Bloc ID already exists.', 
						MacroPackage$Literals::BLOC__NAME,
						INVALID_NAME)
					}
				}
			}else if(o instanceof onLoadBloc == false){
				error('An element of the Macro isn\'t a Bloc nor an OnLoadBloc. All elements of Macros should be Blocs.', 
						MacroPackage$Literals::DOMAIN__ELEMENTS,
						INVALID_ELEMENT)
			}
		}
	}
	
	@Check
	/**
	 * FIXME Ce check fonctionne pas :( 
	 * (Pour vérifier que l'ID de bloc pointé par un GOTO est bien existant)
	 */
	def checkGOTOvalidID(Domain domain, intDirective dir) {
		if(dir.getName() != "GOTO"){
			return;
		}
		for(EObject o : domain.eContents()){
			if(o instanceof Bloc){
				val b = o as Bloc;
				if(b.getName() == dir.getValue()){
					return;
				}
			}else{
				error('An element of the Macro isn\'t a Bloc. All elements of Macros should be Blocs.', 
						MacroPackage$Literals::DOMAIN__ELEMENTS,
						INVALID_ELEMENT)
			}
		}
		error('GOTO directive points towards an inexisting Bloc ID.', 
					MacroPackage$Literals::INT_DIRECTIVE__VALUE,
					INVALID_ARGUMENT)
	}
	
	
	
}
