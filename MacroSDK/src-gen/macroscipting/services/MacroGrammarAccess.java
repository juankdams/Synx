/*
* generated by Xtext
*/
package macroscipting.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MacroGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class DomainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Domain");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cElementsOnLoadBlocParserRuleCall_0_0 = (RuleCall)cElementsAssignment_0.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsBlocParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsClassParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		
		//Domain:
		//
		//	elements+=onLoadBloc elements+=Bloc* elements+=Class*;
		public ParserRule getRule() { return rule; }

		//elements+=onLoadBloc elements+=Bloc* elements+=Class*
		public Group getGroup() { return cGroup; }

		//elements+=onLoadBloc
		public Assignment getElementsAssignment_0() { return cElementsAssignment_0; }

		//onLoadBloc
		public RuleCall getElementsOnLoadBlocParserRuleCall_0_0() { return cElementsOnLoadBlocParserRuleCall_0_0; }

		//elements+=Bloc*
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }

		//Bloc
		public RuleCall getElementsBlocParserRuleCall_1_0() { return cElementsBlocParserRuleCall_1_0; }

		//elements+=Class*
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }

		//Class
		public RuleCall getElementsClassParserRuleCall_2_0() { return cElementsClassParserRuleCall_2_0; }
	}

	public class ClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Class");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSuperTypeClassParserRuleCall_2_1_0 = (RuleCall)cSuperTypeAssignment_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Class:
		//
		//	"class" name=ID ("extends" superType=Class)? "{" "}";
		public ParserRule getRule() { return rule; }

		//"class" name=ID ("extends" superType=Class)? "{" "}"
		public Group getGroup() { return cGroup; }

		//"class"
		public Keyword getClassKeyword_0() { return cClassKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("extends" superType=Class)?
		public Group getGroup_2() { return cGroup_2; }

		//"extends"
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }

		//superType=Class
		public Assignment getSuperTypeAssignment_2_1() { return cSuperTypeAssignment_2_1; }

		//Class
		public RuleCall getSuperTypeClassParserRuleCall_2_1_0() { return cSuperTypeClassParserRuleCall_2_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class OnLoadBlocElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "onLoadBloc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOnLoadKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cFilePathKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFilePathAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFilePathSTRINGTerminalRuleCall_4_0 = (RuleCall)cFilePathAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cFileNameKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cEqualsSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cFileNameAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cFileNameSTRINGTerminalRuleCall_8_0 = (RuleCall)cFileNameAssignment_8.eContents().get(0);
		private final Keyword cSemicolonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cCharacterIDKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cEqualsSignKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cCharacterIDAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cCharacterIDINTTerminalRuleCall_12_0 = (RuleCall)cCharacterIDAssignment_12.eContents().get(0);
		private final Keyword cSemicolonKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Keyword cScopeKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Keyword cEqualsSignKeyword_15 = (Keyword)cGroup.eContents().get(15);
		private final Assignment cScopeAssignment_16 = (Assignment)cGroup.eContents().get(16);
		private final RuleCall cScopeScopeTypeParserRuleCall_16_0 = (RuleCall)cScopeAssignment_16.eContents().get(0);
		private final Keyword cSemicolonKeyword_17 = (Keyword)cGroup.eContents().get(17);
		private final Keyword cCompatMicroKeyword_18 = (Keyword)cGroup.eContents().get(18);
		private final Keyword cEqualsSignKeyword_19 = (Keyword)cGroup.eContents().get(19);
		private final Alternatives cAlternatives_20 = (Alternatives)cGroup.eContents().get(20);
		private final Assignment cCompactMicroAssignment_20_0 = (Assignment)cAlternatives_20.eContents().get(0);
		private final Keyword cCompactMicroTrueKeyword_20_0_0 = (Keyword)cCompactMicroAssignment_20_0.eContents().get(0);
		private final Keyword cFalseKeyword_20_1 = (Keyword)cAlternatives_20.eContents().get(1);
		private final Keyword cSemicolonKeyword_21 = (Keyword)cGroup.eContents().get(21);
		private final Keyword cRightCurlyBracketKeyword_22 = (Keyword)cGroup.eContents().get(22);
		
		//onLoadBloc:
		//
		//	"onLoad" "{" "filePath" "=" filePath=STRING ";" "fileName" "=" fileName=STRING ";" "characterID" "=" characterID=INT
		//
		//	";" "scope" "=" scope=ScopeType ";" "compatMicro" "=" (compactMicro="true" | "false") ";" "}";
		public ParserRule getRule() { return rule; }

		//"onLoad" "{" "filePath" "=" filePath=STRING ";" "fileName" "=" fileName=STRING ";" "characterID" "=" characterID=INT ";"
		//
		//"scope" "=" scope=ScopeType ";" "compatMicro" "=" (compactMicro="true" | "false") ";" "}"
		public Group getGroup() { return cGroup; }

		//"onLoad"
		public Keyword getOnLoadKeyword_0() { return cOnLoadKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"filePath"
		public Keyword getFilePathKeyword_2() { return cFilePathKeyword_2; }

		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//filePath=STRING
		public Assignment getFilePathAssignment_4() { return cFilePathAssignment_4; }

		//STRING
		public RuleCall getFilePathSTRINGTerminalRuleCall_4_0() { return cFilePathSTRINGTerminalRuleCall_4_0; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }

		//"fileName"
		public Keyword getFileNameKeyword_6() { return cFileNameKeyword_6; }

		//"="
		public Keyword getEqualsSignKeyword_7() { return cEqualsSignKeyword_7; }

		//fileName=STRING
		public Assignment getFileNameAssignment_8() { return cFileNameAssignment_8; }

		//STRING
		public RuleCall getFileNameSTRINGTerminalRuleCall_8_0() { return cFileNameSTRINGTerminalRuleCall_8_0; }

		//";"
		public Keyword getSemicolonKeyword_9() { return cSemicolonKeyword_9; }

		//"characterID"
		public Keyword getCharacterIDKeyword_10() { return cCharacterIDKeyword_10; }

		//"="
		public Keyword getEqualsSignKeyword_11() { return cEqualsSignKeyword_11; }

		//characterID=INT
		public Assignment getCharacterIDAssignment_12() { return cCharacterIDAssignment_12; }

		//INT
		public RuleCall getCharacterIDINTTerminalRuleCall_12_0() { return cCharacterIDINTTerminalRuleCall_12_0; }

		//";"
		public Keyword getSemicolonKeyword_13() { return cSemicolonKeyword_13; }

		//"scope"
		public Keyword getScopeKeyword_14() { return cScopeKeyword_14; }

		//"="
		public Keyword getEqualsSignKeyword_15() { return cEqualsSignKeyword_15; }

		//scope=ScopeType
		public Assignment getScopeAssignment_16() { return cScopeAssignment_16; }

		//ScopeType
		public RuleCall getScopeScopeTypeParserRuleCall_16_0() { return cScopeScopeTypeParserRuleCall_16_0; }

		//";"
		public Keyword getSemicolonKeyword_17() { return cSemicolonKeyword_17; }

		//"compatMicro"
		public Keyword getCompatMicroKeyword_18() { return cCompatMicroKeyword_18; }

		//"="
		public Keyword getEqualsSignKeyword_19() { return cEqualsSignKeyword_19; }

		//compactMicro="true" | "false"
		public Alternatives getAlternatives_20() { return cAlternatives_20; }

		//compactMicro="true"
		public Assignment getCompactMicroAssignment_20_0() { return cCompactMicroAssignment_20_0; }

		//"true"
		public Keyword getCompactMicroTrueKeyword_20_0_0() { return cCompactMicroTrueKeyword_20_0_0; }

		//"false"
		public Keyword getFalseKeyword_20_1() { return cFalseKeyword_20_1; }

		//";"
		public Keyword getSemicolonKeyword_21() { return cSemicolonKeyword_21; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_22() { return cRightCurlyBracketKeyword_22; }
	}

	public class BlocElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Bloc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBlocKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameINTTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDirectivesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDirectivesDirectiveParserRuleCall_3_0 = (RuleCall)cDirectivesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Bloc:
		//
		//	"bloc #" name=INT "{" directives+=Directive* "}";
		public ParserRule getRule() { return rule; }

		//"bloc #" name=INT "{" directives+=Directive* "}"
		public Group getGroup() { return cGroup; }

		//"bloc #"
		public Keyword getBlocKeyword_0() { return cBlocKeyword_0; }

		//name=INT
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//INT
		public RuleCall getNameINTTerminalRuleCall_1_0() { return cNameINTTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//directives+=Directive*
		public Assignment getDirectivesAssignment_3() { return cDirectivesAssignment_3; }

		//Directive
		public RuleCall getDirectivesDirectiveParserRuleCall_3_0() { return cDirectivesDirectiveParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class DirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Directive");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDirKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cIntDirectiveParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cStrDirectiveParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final RuleCall cVarDirectiveParserRuleCall_1_2 = (RuleCall)cAlternatives_1.eContents().get(2);
		private final RuleCall cConditionnalDirectiveParserRuleCall_1_3 = (RuleCall)cAlternatives_1.eContents().get(3);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		////; returns Value:
		//
		//Directive:
		//
		//	"dir" (intDirective | strDirective | varDirective | conditionnalDirective) ";";
		public ParserRule getRule() { return rule; }

		//"dir" (intDirective | strDirective | varDirective | conditionnalDirective) ";"
		public Group getGroup() { return cGroup; }

		//"dir"
		public Keyword getDirKeyword_0() { return cDirKeyword_0; }

		//intDirective | strDirective | varDirective | conditionnalDirective
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//intDirective
		public RuleCall getIntDirectiveParserRuleCall_1_0() { return cIntDirectiveParserRuleCall_1_0; }

		//strDirective
		public RuleCall getStrDirectiveParserRuleCall_1_1() { return cStrDirectiveParserRuleCall_1_1; }

		//varDirective
		public RuleCall getVarDirectiveParserRuleCall_1_2() { return cVarDirectiveParserRuleCall_1_2; }

		//conditionnalDirective
		public RuleCall getConditionnalDirectiveParserRuleCall_1_3() { return cConditionnalDirectiveParserRuleCall_1_3; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class ConditionnalDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "conditionnalDirective");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIfDirectiveParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWaitDirectiveParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLockDirectiveParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//conditionnalDirective:
		//
		//	ifDirective | waitDirective | lockDirective;
		public ParserRule getRule() { return rule; }

		//ifDirective | waitDirective | lockDirective
		public Alternatives getAlternatives() { return cAlternatives; }

		//ifDirective
		public RuleCall getIfDirectiveParserRuleCall_0() { return cIfDirectiveParserRuleCall_0; }

		//waitDirective
		public RuleCall getWaitDirectiveParserRuleCall_1() { return cWaitDirectiveParserRuleCall_1; }

		//lockDirective
		public RuleCall getLockDirectiveParserRuleCall_2() { return cLockDirectiveParserRuleCall_2; }
	}

	public class StrDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "strDirective");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameStringDirectiveParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		////directives += [strDirective]*
		//
		//strDirective:
		//
		//	name= //('returns' type = STRING) 
		//
		//	StringDirective ":" value= //| ifDirective
		//
		//	STRING;
		public ParserRule getRule() { return rule; }

		//name= //('returns' type = STRING) 
		//
		//StringDirective ":" value= //| ifDirective
		//
		//STRING
		public Group getGroup() { return cGroup; }

		//name= //('returns' type = STRING) 
		//
		//StringDirective
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		////('returns' type = STRING) 
		//
		//StringDirective
		public RuleCall getNameStringDirectiveParserRuleCall_0_0() { return cNameStringDirectiveParserRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//value= //| ifDirective
		//
		//STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		////| ifDirective
		//
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}

	public class IntDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "intDirective");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIntegerDirectiveParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		////directives += [intDirective]*
		//
		//intDirective:
		//
		//	name= //('returns' type = INT) 
		//
		//	IntegerDirective ":" value=INT;
		public ParserRule getRule() { return rule; }

		//name= //('returns' type = INT) 
		//
		//IntegerDirective ":" value=INT
		public Group getGroup() { return cGroup; }

		//name= //('returns' type = INT) 
		//
		//IntegerDirective
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		////('returns' type = INT) 
		//
		//IntegerDirective
		public RuleCall getNameIntegerDirectiveParserRuleCall_0_0() { return cNameIntegerDirectiveParserRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//value=INT
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_2_0() { return cValueINTTerminalRuleCall_2_0; }
	}

	public class VarDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "varDirective");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameVARKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLeftAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLeftIDTerminalRuleCall_2_0 = (RuleCall)cLeftAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRightAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRightIDTerminalRuleCall_4_0 = (RuleCall)cRightAssignment_4.eContents().get(0);
		
		//varDirective:
		//
		//	name="VAR" ":" left=ID "=" right=ID;
		public ParserRule getRule() { return rule; }

		//name="VAR" ":" left=ID "=" right=ID
		public Group getGroup() { return cGroup; }

		//name="VAR"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"VAR"
		public Keyword getNameVARKeyword_0_0() { return cNameVARKeyword_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//left=ID
		public Assignment getLeftAssignment_2() { return cLeftAssignment_2; }

		//ID
		public RuleCall getLeftIDTerminalRuleCall_2_0() { return cLeftIDTerminalRuleCall_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//right=ID
		public Assignment getRightAssignment_4() { return cRightAssignment_4; }

		//ID
		public RuleCall getRightIDTerminalRuleCall_4_0() { return cRightIDTerminalRuleCall_4_0; }
	}

	public class IfDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ifDirective");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameIFKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLeftAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLeftIDTerminalRuleCall_2_0 = (RuleCall)cLeftAssignment_2.eContents().get(0);
		private final Assignment cOperatorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperatorOperatorParserRuleCall_3_0 = (RuleCall)cOperatorAssignment_3.eContents().get(0);
		private final Assignment cRightAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRightIDTerminalRuleCall_4_0 = (RuleCall)cRightAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cDirectivesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cDirectivesDirectiveParserRuleCall_7_0 = (RuleCall)cDirectivesAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//ifDirective:
		//
		//	name= //('returns' type = STRING) 
		//
		//	"IF" "(" left=ID operator=operator right=ID ")" "{"? directives+=Directive* "}"?;
		public ParserRule getRule() { return rule; }

		//name= //('returns' type = STRING) 
		//
		//"IF" "(" left=ID operator=operator right=ID ")" "{"? directives+=Directive* "}"?
		public Group getGroup() { return cGroup; }

		//name= //('returns' type = STRING) 
		//
		//"IF"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		////('returns' type = STRING) 
		//
		//"IF"
		public Keyword getNameIFKeyword_0_0() { return cNameIFKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//left=ID
		public Assignment getLeftAssignment_2() { return cLeftAssignment_2; }

		//ID
		public RuleCall getLeftIDTerminalRuleCall_2_0() { return cLeftIDTerminalRuleCall_2_0; }

		//operator=operator
		public Assignment getOperatorAssignment_3() { return cOperatorAssignment_3; }

		//operator
		public RuleCall getOperatorOperatorParserRuleCall_3_0() { return cOperatorOperatorParserRuleCall_3_0; }

		//right=ID
		public Assignment getRightAssignment_4() { return cRightAssignment_4; }

		//ID
		public RuleCall getRightIDTerminalRuleCall_4_0() { return cRightIDTerminalRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//"{"?
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }

		//directives+=Directive*
		public Assignment getDirectivesAssignment_7() { return cDirectivesAssignment_7; }

		//Directive
		public RuleCall getDirectivesDirectiveParserRuleCall_7_0() { return cDirectivesDirectiveParserRuleCall_7_0; }

		//"}"?
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class WaitDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "waitDirective");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameWAITKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTimeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTimeINTTerminalRuleCall_2_0 = (RuleCall)cTimeAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//waitDirective:
		//
		//	name= //('returns' type = STRING) 
		//
		//	"WAIT" "(" time=INT ")";
		public ParserRule getRule() { return rule; }

		//name= //('returns' type = STRING) 
		//
		//"WAIT" "(" time=INT ")"
		public Group getGroup() { return cGroup; }

		//name= //('returns' type = STRING) 
		//
		//"WAIT"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		////('returns' type = STRING) 
		//
		//"WAIT"
		public Keyword getNameWAITKeyword_0_0() { return cNameWAITKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//time=INT
		public Assignment getTimeAssignment_2() { return cTimeAssignment_2; }

		//INT
		public RuleCall getTimeINTTerminalRuleCall_2_0() { return cTimeINTTerminalRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class LockDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lockDirective");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameLOCKKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVariableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariableIDTerminalRuleCall_2_0 = (RuleCall)cVariableAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//lockDirective:
		//
		//	name= //('returns' type = STRING) 
		//
		//	"LOCK" "(" variable=ID ")";
		public ParserRule getRule() { return rule; }

		//name= //('returns' type = STRING) 
		//
		//"LOCK" "(" variable=ID ")"
		public Group getGroup() { return cGroup; }

		//name= //('returns' type = STRING) 
		//
		//"LOCK"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		////('returns' type = STRING) 
		//
		//"LOCK"
		public Keyword getNameLOCKKeyword_0_0() { return cNameLOCKKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//variable=ID
		public Assignment getVariableAssignment_2() { return cVariableAssignment_2; }

		//ID
		public RuleCall getVariableIDTerminalRuleCall_2_0() { return cVariableIDTerminalRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class OperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//operator:
		//
		//	"==" | "!=";
		public ParserRule getRule() { return rule; }

		//"==" | "!="
		public Alternatives getAlternatives() { return cAlternatives; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignKeyword_0; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_1() { return cExclamationMarkEqualsSignKeyword_1; }
	}

	public class IntegerDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerDirective");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEMOTEKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cDIRECTIONKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cMOVEMENTKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cGOTOKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//IntegerDirective:
		//
		//	"EMOTE" | "DIRECTION" | "MOVEMENT" | "GOTO";
		public ParserRule getRule() { return rule; }

		//"EMOTE" | "DIRECTION" | "MOVEMENT" | "GOTO"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"EMOTE"
		public Keyword getEMOTEKeyword_0() { return cEMOTEKeyword_0; }

		//"DIRECTION"
		public Keyword getDIRECTIONKeyword_1() { return cDIRECTIONKeyword_1; }

		//"MOVEMENT"
		public Keyword getMOVEMENTKeyword_2() { return cMOVEMENTKeyword_2; }

		//"GOTO"
		public Keyword getGOTOKeyword_3() { return cGOTOKeyword_3; }
	}

	public class StringDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringDirective");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cCHATKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cEFFETKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cVARKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cIFKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		/// *
		//
		//EMOTE:'EMOTE';
		//
		//DIRECTION:'DIRECTION';
		//
		//MOVEMENT:'MOVEMENT';
		//
		//GOTO:'GOTO';
		//
		// * / StringDirective:
		//
		//	"CHAT" | "EFFET" | "VAR" | "IF";
		public ParserRule getRule() { return rule; }

		//"CHAT" | "EFFET" | "VAR" | "IF"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"CHAT"
		public Keyword getCHATKeyword_0() { return cCHATKeyword_0; }

		//"EFFET"
		public Keyword getEFFETKeyword_1() { return cEFFETKeyword_1; }

		//"VAR"
		public Keyword getVARKeyword_2() { return cVARKeyword_2; }

		//"IF"
		public Keyword getIFKeyword_3() { return cIFKeyword_3; }
	}

	public class ScopeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ScopeType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTO_MAPKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cTO_TARGETKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cTO_SUBZONEKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cTO_ZONEKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cTO_SUPERZONEKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cTO_ALLKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		/// *
		//
		//CHAT:'CHAT';
		//
		//EFFET:'EFFET';
		//
		//VAR:'VAR';
		//
		//IF:'IF';
		//
		// * / //terminal DIRECTIVE_NAMES_INT : ('EMOTE'|'DIRECTION'|'MOVEMENT'|'GOTO');
		//
		////terminal DIRECTIVE_NAMES_STRING : ('CHAT'|'EFFET'|'VAR'|'IF');
		//
		////terminal DIRECTIVE_NAMES : ('CHAT'|'EFFET'|'VAR'|'IF'|'EMOTE'|'DIRECTION'|'MOVEMENT'|'GOTO');
		//
		////terminal ANY_STRING	: 
		//
		////	( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'"') )*
		//
		////; 
		//
		//ScopeType:
		//
		//	"TO_MAP" | "TO_TARGET" | "TO_SUBZONE" | "TO_ZONE" | "TO_SUPERZONE" | "TO_ALL";
		public ParserRule getRule() { return rule; }

		//"TO_MAP" | "TO_TARGET" | "TO_SUBZONE" | "TO_ZONE" | "TO_SUPERZONE" | "TO_ALL"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"TO_MAP"
		public Keyword getTO_MAPKeyword_0() { return cTO_MAPKeyword_0; }

		//"TO_TARGET"
		public Keyword getTO_TARGETKeyword_1() { return cTO_TARGETKeyword_1; }

		//"TO_SUBZONE"
		public Keyword getTO_SUBZONEKeyword_2() { return cTO_SUBZONEKeyword_2; }

		//"TO_ZONE"
		public Keyword getTO_ZONEKeyword_3() { return cTO_ZONEKeyword_3; }

		//"TO_SUPERZONE"
		public Keyword getTO_SUPERZONEKeyword_4() { return cTO_SUPERZONEKeyword_4; }

		//"TO_ALL"
		public Keyword getTO_ALLKeyword_5() { return cTO_ALLKeyword_5; }
	}
	
	
	private DomainElements pDomain;
	private ClassElements pClass;
	private OnLoadBlocElements pOnLoadBloc;
	private BlocElements pBloc;
	private DirectiveElements pDirective;
	private ConditionnalDirectiveElements pConditionnalDirective;
	private StrDirectiveElements pStrDirective;
	private IntDirectiveElements pIntDirective;
	private VarDirectiveElements pVarDirective;
	private IfDirectiveElements pIfDirective;
	private WaitDirectiveElements pWaitDirective;
	private LockDirectiveElements pLockDirective;
	private OperatorElements pOperator;
	private IntegerDirectiveElements pIntegerDirective;
	private StringDirectiveElements pStringDirective;
	private ScopeTypeElements pScopeType;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public MacroGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("macroscipting.Macro".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Domain:
	//
	//	elements+=onLoadBloc elements+=Bloc* elements+=Class*;
	public DomainElements getDomainAccess() {
		return (pDomain != null) ? pDomain : (pDomain = new DomainElements());
	}
	
	public ParserRule getDomainRule() {
		return getDomainAccess().getRule();
	}

	//Class:
	//
	//	"class" name=ID ("extends" superType=Class)? "{" "}";
	public ClassElements getClassAccess() {
		return (pClass != null) ? pClass : (pClass = new ClassElements());
	}
	
	public ParserRule getClassRule() {
		return getClassAccess().getRule();
	}

	//onLoadBloc:
	//
	//	"onLoad" "{" "filePath" "=" filePath=STRING ";" "fileName" "=" fileName=STRING ";" "characterID" "=" characterID=INT
	//
	//	";" "scope" "=" scope=ScopeType ";" "compatMicro" "=" (compactMicro="true" | "false") ";" "}";
	public OnLoadBlocElements getOnLoadBlocAccess() {
		return (pOnLoadBloc != null) ? pOnLoadBloc : (pOnLoadBloc = new OnLoadBlocElements());
	}
	
	public ParserRule getOnLoadBlocRule() {
		return getOnLoadBlocAccess().getRule();
	}

	//Bloc:
	//
	//	"bloc #" name=INT "{" directives+=Directive* "}";
	public BlocElements getBlocAccess() {
		return (pBloc != null) ? pBloc : (pBloc = new BlocElements());
	}
	
	public ParserRule getBlocRule() {
		return getBlocAccess().getRule();
	}

	////; returns Value:
	//
	//Directive:
	//
	//	"dir" (intDirective | strDirective | varDirective | conditionnalDirective) ";";
	public DirectiveElements getDirectiveAccess() {
		return (pDirective != null) ? pDirective : (pDirective = new DirectiveElements());
	}
	
	public ParserRule getDirectiveRule() {
		return getDirectiveAccess().getRule();
	}

	//conditionnalDirective:
	//
	//	ifDirective | waitDirective | lockDirective;
	public ConditionnalDirectiveElements getConditionnalDirectiveAccess() {
		return (pConditionnalDirective != null) ? pConditionnalDirective : (pConditionnalDirective = new ConditionnalDirectiveElements());
	}
	
	public ParserRule getConditionnalDirectiveRule() {
		return getConditionnalDirectiveAccess().getRule();
	}

	////directives += [strDirective]*
	//
	//strDirective:
	//
	//	name= //('returns' type = STRING) 
	//
	//	StringDirective ":" value= //| ifDirective
	//
	//	STRING;
	public StrDirectiveElements getStrDirectiveAccess() {
		return (pStrDirective != null) ? pStrDirective : (pStrDirective = new StrDirectiveElements());
	}
	
	public ParserRule getStrDirectiveRule() {
		return getStrDirectiveAccess().getRule();
	}

	////directives += [intDirective]*
	//
	//intDirective:
	//
	//	name= //('returns' type = INT) 
	//
	//	IntegerDirective ":" value=INT;
	public IntDirectiveElements getIntDirectiveAccess() {
		return (pIntDirective != null) ? pIntDirective : (pIntDirective = new IntDirectiveElements());
	}
	
	public ParserRule getIntDirectiveRule() {
		return getIntDirectiveAccess().getRule();
	}

	//varDirective:
	//
	//	name="VAR" ":" left=ID "=" right=ID;
	public VarDirectiveElements getVarDirectiveAccess() {
		return (pVarDirective != null) ? pVarDirective : (pVarDirective = new VarDirectiveElements());
	}
	
	public ParserRule getVarDirectiveRule() {
		return getVarDirectiveAccess().getRule();
	}

	//ifDirective:
	//
	//	name= //('returns' type = STRING) 
	//
	//	"IF" "(" left=ID operator=operator right=ID ")" "{"? directives+=Directive* "}"?;
	public IfDirectiveElements getIfDirectiveAccess() {
		return (pIfDirective != null) ? pIfDirective : (pIfDirective = new IfDirectiveElements());
	}
	
	public ParserRule getIfDirectiveRule() {
		return getIfDirectiveAccess().getRule();
	}

	//waitDirective:
	//
	//	name= //('returns' type = STRING) 
	//
	//	"WAIT" "(" time=INT ")";
	public WaitDirectiveElements getWaitDirectiveAccess() {
		return (pWaitDirective != null) ? pWaitDirective : (pWaitDirective = new WaitDirectiveElements());
	}
	
	public ParserRule getWaitDirectiveRule() {
		return getWaitDirectiveAccess().getRule();
	}

	//lockDirective:
	//
	//	name= //('returns' type = STRING) 
	//
	//	"LOCK" "(" variable=ID ")";
	public LockDirectiveElements getLockDirectiveAccess() {
		return (pLockDirective != null) ? pLockDirective : (pLockDirective = new LockDirectiveElements());
	}
	
	public ParserRule getLockDirectiveRule() {
		return getLockDirectiveAccess().getRule();
	}

	//operator:
	//
	//	"==" | "!=";
	public OperatorElements getOperatorAccess() {
		return (pOperator != null) ? pOperator : (pOperator = new OperatorElements());
	}
	
	public ParserRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}

	//IntegerDirective:
	//
	//	"EMOTE" | "DIRECTION" | "MOVEMENT" | "GOTO";
	public IntegerDirectiveElements getIntegerDirectiveAccess() {
		return (pIntegerDirective != null) ? pIntegerDirective : (pIntegerDirective = new IntegerDirectiveElements());
	}
	
	public ParserRule getIntegerDirectiveRule() {
		return getIntegerDirectiveAccess().getRule();
	}

	/// *
	//
	//EMOTE:'EMOTE';
	//
	//DIRECTION:'DIRECTION';
	//
	//MOVEMENT:'MOVEMENT';
	//
	//GOTO:'GOTO';
	//
	// * / StringDirective:
	//
	//	"CHAT" | "EFFET" | "VAR" | "IF";
	public StringDirectiveElements getStringDirectiveAccess() {
		return (pStringDirective != null) ? pStringDirective : (pStringDirective = new StringDirectiveElements());
	}
	
	public ParserRule getStringDirectiveRule() {
		return getStringDirectiveAccess().getRule();
	}

	/// *
	//
	//CHAT:'CHAT';
	//
	//EFFET:'EFFET';
	//
	//VAR:'VAR';
	//
	//IF:'IF';
	//
	// * / //terminal DIRECTIVE_NAMES_INT : ('EMOTE'|'DIRECTION'|'MOVEMENT'|'GOTO');
	//
	////terminal DIRECTIVE_NAMES_STRING : ('CHAT'|'EFFET'|'VAR'|'IF');
	//
	////terminal DIRECTIVE_NAMES : ('CHAT'|'EFFET'|'VAR'|'IF'|'EMOTE'|'DIRECTION'|'MOVEMENT'|'GOTO');
	//
	////terminal ANY_STRING	: 
	//
	////	( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'"') )*
	//
	////; 
	//
	//ScopeType:
	//
	//	"TO_MAP" | "TO_TARGET" | "TO_SUBZONE" | "TO_ZONE" | "TO_SUPERZONE" | "TO_ALL";
	public ScopeTypeElements getScopeTypeAccess() {
		return (pScopeType != null) ? pScopeType : (pScopeType = new ScopeTypeElements());
	}
	
	public ParserRule getScopeTypeRule() {
		return getScopeTypeAccess().getRule();
	}

	//terminal ID:
	//
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
