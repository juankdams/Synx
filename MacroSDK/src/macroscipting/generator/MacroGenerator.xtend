/*
 * generated by Xtext
 */
package macroscipting.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import java.lang.StringBuilder
import java.io.File
import macroscipting.macro.Domain
import macroscipting.macro.onLoadBloc
import macroscipting.macro.Bloc
import macroscipting.macro.Directive
import macroscipting.macro.ifDirective
import macroscipting.macro.waitDirective
import macroscipting.macro.conditionnalDirective
import macroscipting.macro.varDirective
import macroscipting.macro.intDirective
import macroscipting.macro.strDirective
import com.google.inject.Inject
import com.google.inject.Provider
import org.eclipse.xtext.resource.IResourceDescriptions
import macroscipting.macro.MacroPackage

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class MacroGenerator implements IGenerator {
	
	public static boolean compactMicro = false;
	
	//private static HashMap<Integer, Bloc> blocs = new HashMap<Integer, Bloc>();
	@Inject
    private IGenerator generator;
 
    //@Inject
   // private Provider<EclipseResourceFileSystemAccess> fileAccessProvider;
     
    @Inject
    IResourceDescriptions resourceDescriptions;
     
   // @Inject
    //IResourceSetProvider resourceSetProvider;
     
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		//		fsa.generateFile('greetings.txt', 'People to greet: ' + 
		//			resource.allContents
		//				.filter(typeof(Greeting))
		//				.map[name]
		//				.join(', '))
		System::out.println("hellotheshit");
		
		for(e: IterableExtensions::filter(resource.allContents.toIterable, typeof(Domain)) ) {
			System::out.println("filtered to Domain");
			//var name = e.name.toString.replace(".", "/") + "/";
			//System::out.println("[TrucName] = ("+name+").");
			//new File(name).mkdirs
			//for(e2 : e.eContents()){
				if(e instanceof Domain){
					val domain = e as Domain;
					var onLoad = null as onLoadBloc;
					for(e3 : domain.eContents()){
						if(e3 instanceof onLoadBloc){
							onLoad = e3 as onLoadBloc;
							compactMicro = onLoad.getCompactMicro().toLowerCase().equals("true");
						}
					}
					//onLoad.getFilePath();
					//onLoad.getFileName();
					System::out.println("e = ("+e+").");
					fsa.generateFile(onLoad.getFilePath() + onLoad.getFileName() + ".micro", compile(domain));
				}else{
					System::out.println("ERROR 1");
				}
		}
		//for(e: IterableExtensions::filter(resource.allContents.toIterable, typeof(MacroPackage)) ) {
		//	System::out.println("filtered to MacroPackage");
		//}
		//for(e: IterableExtensions::filter(resource.allContents.toIterable, typeof(Bloc)) ) {
		//	System::out.println("filtered to Bloc");
		//}
		
	}
	
	
	def compile(Domain domain) {
		var b = new StringBuilder();
		
		for(e3 : domain.eContents()){
			if(e3 instanceof onLoadBloc){
				var onload = e3 as onLoadBloc;
				b.append("onLoadBloc:\n\t")//.append( (compactMicro == true ? "" :  "\n\t") )
				.append("filePath=").append(onload.getFilePath()).append(";\n")
				.append("fileName=").append(onload.getFileName()).append(";\n")
				.append("characterID=").append(onload.getCharacterID()).append(";\n")
				.append("scope=").append(onload.getScope()).append(";\n")
				.append("compactMicro=").append(onload.getCompactMicro()).append(";\n")
				.append(";\n");
			}else if(e3 instanceof Bloc){
				var bloc = e3 as Bloc;
				b.append( compileBloc(bloc) );
			}else{
				//error
			}
				//b.append( compileBloc(bloc) );
				
		}
		
		
		return b.toString();
	}
	
	def compileBloc(Bloc bloc) {
		var b = new StringBuilder();
		b.append("\n\n#").append(bloc.getName()).append(":\t");
		for(eDir : bloc.eContents()){
			if(eDir instanceof Directive){
				var dir = eDir as Directive;
				b.append( compileDirective(dir) );
			}else{
				//error
			}
		}
		b.append("\n;");
		return b;
	}
	
	
	def compileDirective(Directive dir){
		var b = new StringBuilder();
		b.append("\n$").append(dir.getName());
		if(dir instanceof conditionnalDirective){
			var condDir = dir as conditionnalDirective;
			b.append( compileConditionnalDirective(condDir) );
			return b;
		}
		b.append(":");
		if(dir instanceof varDirective){
			var varDir = dir as varDirective;
			b.append(varDir.getLeft())
			.append("=")
			.append(varDir.getRight());
		}else if(dir instanceof intDirective){
			var intDir = dir as intDirective;
			b.append(intDir.getValue());
		}else if(dir instanceof strDirective){
			var strDir = dir as strDirective;
			b.append(strDir.getValue());
		}
		b.append(";");
		return b;	
	}
	
	def compileConditionnalDirective(conditionnalDirective dir){
		var b = new StringBuilder();
		b.append("(");
		if(dir instanceof ifDirective){
			var ifDir = dir as ifDirective;
			b.append(ifDir.getLeft());
			b.append(ifDir.getOperator());
			b.append(ifDir.getRight());
		}
		b.append(")");
		b.append(":");
		if(dir instanceof ifDirective){
			var ifDir = dir as ifDirective;
			for(d : ifDir.getDirectives()){
				b.append( compileDirective(d) );
			}
		}
		b.append("\n;");
	}
	
	
	
}
